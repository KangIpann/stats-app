package Match

import android.annotation.SuppressLint
import android.content.ContentValues.TAG
import android.content.res.Configuration
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.CountDownTimer
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.constraintlayout.widget.ConstraintLayout
import com.example.statsapp.R
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import org.w3c.dom.Text
import kotlin.math.log

class MatchBerjalan : AppCompatActivity() {

    private lateinit var documentId: String
    private lateinit var db: FirebaseFirestore
    private lateinit var matchId: String
    private lateinit var teamHomeDocId: String
    private lateinit var teamAwayDocId: String
    private lateinit var teamHomeGoalKeeper: String
    private lateinit var teamHomeCentreBack: String
    private lateinit var teamHomeLeftBack: String
    private lateinit var teamHomeRightBack: String
    private lateinit var teamHomeDefensiveMidfielder: String
    private lateinit var teamHomeCentralMidfielder: String
    private lateinit var teamHomeAttackingMidfielder: String
    private lateinit var teamHomeLeftWinger: String
    private lateinit var teamHomeRightWinger: String
    private lateinit var teamHomeCentreForward: String
    private lateinit var teamHomeSecondStriker: String
    private lateinit var teamAwayGoalKeeper: String
    private lateinit var teamAwayCentreBack: String
    private lateinit var teamAwayLeftBack: String
    private lateinit var teamAwayRightBack: String
    private lateinit var teamAwayDefensiveMidfielder: String
    private lateinit var teamAwayCentralMidfielder: String
    private lateinit var teamAwayAttackingMidfielder: String
    private lateinit var teamAwayLeftWinger: String
    private lateinit var teamAwayRightWinger: String
    private lateinit var teamAwayCentreForward: String
    private lateinit var teamAwaySecondStriker: String

    //variabel global untuk team Home
    private lateinit var matchDuration: String
    private lateinit var matchName: String
    private lateinit var matchDate: String
    private lateinit var leagueName: String
    private lateinit var homeTeam: String
    private lateinit var awayTeam: String
    private lateinit var tvLeagueName: TextView
    private lateinit var tvLeagueDate: TextView
    private lateinit var tvTeamHome: TextView
    private lateinit var tvTeamAway: TextView
    private lateinit var tvTimer: TextView
    private lateinit var tvHomeGoalKeeperName: TextView
    private lateinit var tvHomeCentreBackName: TextView
    private lateinit var tvHomeLeftBackName: TextView
    private lateinit var tvHomeRightBackName: TextView
    private lateinit var tvHomeDefensiveMidfielderName: TextView
    private lateinit var tvHomeCentralMidfielderName: TextView
    private lateinit var tvHomeAttackingMidfielderName: TextView
    private lateinit var tvHomeLeftWingerName: TextView
    private lateinit var tvHomeRightWingerName: TextView
    private lateinit var tvHomeCentreForwardName: TextView
    private lateinit var tvHomeSecondStrikerName: TextView

    //variabel global untuk team Away
    private lateinit var tvAwayGoalKeeperName: TextView
    private lateinit var tvAwayCentreBackName: TextView
    private lateinit var tvAwayLeftBackName: TextView
    private lateinit var tvAwayRightBackName: TextView
    private lateinit var tvAwayDefensiveMidfielderName: TextView
    private lateinit var tvAwayCentralMidfielderName: TextView
    private lateinit var tvAwayAttackingMidfielderName: TextView
    private lateinit var tvAwayLeftWingerName: TextView
    private lateinit var tvAwayRightWingerName: TextView
    private lateinit var tvAwayCentreForwardName: TextView
    private lateinit var tvAwaySecondStrikerName: TextView


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_match_berjalan)

        //inisialisasi variabel
        db = FirebaseFirestore.getInstance()

        setLeagueDate()
        setLeagueName()
        setHomeTeam()
        setAwayTeam()
        setMatchDuration()
        getHomeTeamDocumentId()
        getAwayTeamDocumentId()
        setDatabase()
        setHomePlayerGoal()
        setPlayerFoul()
    }

    private fun setDatabase() {
        val matchStats = hashMapOf(
            "document_id" to "",
            "league_name" to "",
            "league_date" to "",
            "home_team" to "",
            "away_team" to "",
        )

        db.collection("matchStats")
            .add(matchStats)
            .addOnSuccessListener { documentReference ->
                Log.d("Success", "DocumentSnapshot added with ID: ${documentReference.id}")
                matchId = intent.getStringExtra("matchId").toString()
                documentId = documentReference.id
                println("Match Id: $matchId")

                db.collection("matchStats").document(documentId)
                    .update("document_id", documentId)
                    .addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                db.collection("matchStats").document(documentId)
                    .update("match_id", matchId)
                    .addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                db.collection("matchStats").document(documentId)
                    .update("league_name", matchName)
                    .addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                db.collection("matchStats").document(documentId)
                    .update("league_date", matchDate)
                    .addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                //update home team
                db.collection("matchStats").document(documentId)
                val homeTeam = "${tvTeamHome.text}"
                db.collection("matchStats").document(documentId)
                    .update("home_team", homeTeam)
                    .addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                //update away team
                db.collection("matchStats").document(documentId)
                val awayTeam = "${tvTeamAway.text}"
                db.collection("matchStats").document(documentId)
                    .update("away_team", awayTeam)
                    .addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }
            .addOnFailureListener { e ->
                Log.w("Error", "Error adding document", e)
            }

    }

    private fun showGoalKeeperDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = LayoutInflater.from(this)
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()

        val tvPlayerName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val goalKeeperName = "${tvHomeGoalKeeperName.text}"
        tvPlayerName.text = "Aksi Pemain: $goalKeeperName"

        val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        //jika button shoot goal diklik maka dialog akan berganti menjadi dialog goal
        btnShootGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = LayoutInflater.from(this)
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val shootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            shootGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = shootGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val shotGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "shoot",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(shotGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val healGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            healGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = healGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val healGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "heal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val valleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            valleyGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = valleyGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val valleyGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "valley",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val longGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            longGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = longGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val longGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "long",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val healedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            healedGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = healedGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val healedGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "healed",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val lobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            lobGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = lobGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val lobGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "lob",
                        )

                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val foulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            foulGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = foulGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val foulGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "foul",
                        )

                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val reverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            reverseGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = reverseGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "reverse",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val scissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            scissorsGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = scissorsGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "scissors",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }.addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val otherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            otherGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val actionGoal = otherGoal.text.toString()
                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentGoalKeeperShootGoal =
                            documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_goal")
                                ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeGoalKeeperShootGoal = currentGoalKeeperShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal",
                                homeGoalKeeperShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to goalTime,
                            "scorer" to "${tvHomeGoalKeeperName.text}",
                            "action" to "other",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeGoalKeeperName.text}_goal_times",
                                FieldValue.arrayUnion(goalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }.addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

        }

        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentShootFail =
                        documentSnapshot.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentGoalKeeperShootFail =
                        documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeGoalKeeperShootFail = currentGoalKeeperShootFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_shoot_fail", homeGoalKeeperShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("shoot_fail")
                        .add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_shoot_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }

        }

        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentAssist = documentSnapshot.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentGoalKeeperAssist =
                        documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeGoalKeeperAssist = currentGoalKeeperAssist + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_assist", homeGoalKeeperAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "assist",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("assist")
                        .add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_assist_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btn10mfail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mfail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val current10mfail =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentGoalKeeper10mfail =
                        documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_10m_fail") ?: 0
                    val home10mfail = current10mfail + 1
                    val homeGoalKeeper10mfail = currentGoalKeeper10mfail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mfail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    //tambahkan field ${tvTeamHome.text}_10m_fail


                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_10m_fail", homeGoalKeeper10mfail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }


                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterFailTime = tvTimer.text.toString()
                    val tenMeterFailData = hashMapOf(
                        "time" to tenMeterFailTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_fail")
                        .add(tenMeterFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_10m_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_10m_fail_times",
                            FieldValue.arrayUnion(tenMeterFailTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btn10mgoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mgoal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val current10mgoal =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentGoalKeeper10mgoal =
                        documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_10m_goal") ?: 0
                    val home10mgoal = current10mgoal + 1
                    val homeGoalKeeper10mgoal = currentGoalKeeper10mgoal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mgoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_10m_goal", homeGoalKeeper10mgoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterGoalTime = tvTimer.text.toString()
                    val tenMeterGoalData = hashMapOf(
                        "time" to tenMeterGoalTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_goal")
                        .add(tenMeterGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_10m_goal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_10m_goal_times",
                            FieldValue.arrayUnion(tenMeterGoalTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentRedCard =
                        documentSnapshot.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentGoalKeeperRedCard =
                        documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeGoalKeeperRedCard = currentGoalKeeperRedCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_red_card", homeGoalKeeperRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "red_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_red_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentGoalKeeperYellowCard =
                        it.getLong("${tvHomeGoalKeeperName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeGoalKeeperYellowCard = currentGoalKeeperYellowCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_yellow_card",
                            homeGoalKeeperYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_yellow_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_yellow_card_times",
                            FieldValue.arrayUnion(yellowCardTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {

                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentGoalKeeperSteal =
                        it.getLong("${tvHomeGoalKeeperName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeGoalKeeperSteal = currentGoalKeeperSteal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_steal", homeGoalKeeperSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "steal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("steal")
                        .add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_steal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {

                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentGoalKeeperPenalty =
                        it.getLong("${tvHomeGoalKeeperName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeGoalKeeperPenalty = currentGoalKeeperPenalty + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_penalty", homeGoalKeeperPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "penalty",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("penalty")
                        .add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_penalty_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentOffside = documentSnapshot.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentGoalKeeperOffside =
                        documentSnapshot.getLong("${tvHomeGoalKeeperName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeGoalKeeperOffside = currentGoalKeeperOffside + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeGoalKeeperName.text}_offside", homeGoalKeeperOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeGoalKeeperName.text}",
                        "action" to "offside",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("offside")
                        .add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeGoalKeeperName.text}_offside_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeGoalKeeperName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val gkConstraint = findViewById<ConstraintLayout>(R.id.gk_constraint_home)
        gkConstraint.setOnClickListener() {
            alertDialog.show()
        }
        tvHomeGoalKeeperName = findViewById<TextView>(R.id.tv_goal_player1_name_home)
        tvHomeGoalKeeperName.setOnClickListener() {
            alertDialog.show()
        }
    }

    private fun showHomeCentreBackDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        tvHomeCentreBackName = findViewById<TextView>(R.id.tv_goal_player2_name_home)

        val tvName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvName.text = "Aksi Pemain: ${tvHomeCentreBackName.text}"

        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentShootFail =
                        documentSnapshot.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentCentreBackShootFail =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeCentreBackShootFail = currentCentreBackShootFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_shoot_fail", homeCentreBackShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("shoot_fail")
                        .add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_shoot_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }

        }

        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentAssist = documentSnapshot.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentCentreBackAssist =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeCentreBackAssist = currentCentreBackAssist + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_assist", homeCentreBackAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "assist",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("assist")
                        .add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_assist_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btn10mfail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mfail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val current10mfail =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentCentreBack10mfail =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_10m_fail") ?: 0
                    val home10mfail = current10mfail + 1
                    val homeCentreBack10mfail = currentCentreBack10mfail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mfail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_10m_fail", homeCentreBack10mfail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterFailTime = tvTimer.text.toString()
                    val tenMeterFailData = hashMapOf(
                        "time" to tenMeterFailTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_fail")
                        .add(tenMeterFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_10m_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_10m_fail_times",
                            FieldValue.arrayUnion(tenMeterFailTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }

        }

        val btn10mgoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mgoal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val current10mgoal =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentCentreBack10mgoal =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_10m_goal") ?: 0
                    val home10mgoal = current10mgoal + 1
                    val homeCentreBack10mgoal = currentCentreBack10mgoal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mgoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_10m_goal", homeCentreBack10mgoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterGoalTime = tvTimer.text.toString()
                    val tenMeterGoalData = hashMapOf(
                        "time" to tenMeterGoalTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_goal")
                        .add(tenMeterGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_10m_goal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_10m_goal_times",
                            FieldValue.arrayUnion(tenMeterGoalTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {

                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentCentreBackRedCard =
                        it.getLong("${tvHomeCentreBackName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeCentreBackRedCard = currentCentreBackRedCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_red_card", homeCentreBackRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "red_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_red_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {

                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentCentreBackYellowCard =
                        it.getLong("${tvHomeCentreBackName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeCentreBackYellowCard = currentCentreBackYellowCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_yellow_card",
                            homeCentreBackYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_yellow_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_yellow_card_times",
                            FieldValue.arrayUnion(yellowCardTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentSteal = documentSnapshot.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentCentreBackSteal =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeCentreBackSteal = currentCentreBackSteal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_steal", homeCentreBackSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "steal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("steal")
                        .add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_steal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentPenalty = documentSnapshot.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentCentreBackPenalty =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeCentreBackPenalty = currentCentreBackPenalty + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_penalty", homeCentreBackPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "penalty",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("penalty")
                        .add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_penalty_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentOffside = documentSnapshot.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentCentreBackOffside =
                        documentSnapshot.getLong("${tvHomeCentreBackName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeCentreBackOffside = currentCentreBackOffside + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeCentreBackName.text}_offside", homeCentreBackOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeCentreBackName.text}",
                        "action" to "offside",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("offside")
                        .add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_offside_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeCentreBackName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }.addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val btnGoalShoot = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnGoalShoot.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackShootGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeCentreBackShootGoal = currentCentreBackShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(shootGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentHealGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackHealGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeCentreBackHealGoal = currentCentreBackHealGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeCentreBackName.text}_goal", homeCentreBackHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(healGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentValleyGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackValleyGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal")
                                ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeCentreBackValleyGoal = currentCentreBackValleyGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackValleyGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentLongGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackLongGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeCentreBackLongGoal = currentCentreBackLongGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackLongGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "long_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
                    .addOnFailureListener { e ->
                        Log.w("Error", "Error updating document", e)
                    }
            }

            val btnHealedGoaled = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoaled.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentHealedGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackHealedGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal")
                                ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeCentreBackHealedGoal = currentCentreBackHealedGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackHealedGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentLobGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackLobGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeCentreBackLobGoal = currentCentreBackLobGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackLobGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentFoulGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackFoulGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal") ?: 0
                        val homeFoulGoal = currentFoulGoal + 1
                        val homeCentreBackFoulGoal = currentCentreBackFoulGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackFoulGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentReverseGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackReverseGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal")
                                ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeCentreBackReverseGoal = currentCentreBackReverseGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackReverseGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnScissorGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentScissorGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackScissorGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal")
                                ?: 0
                        val homeScissorGoal = currentScissorGoal + 1
                        val homeCentreBackScissorGoal = currentCentreBackScissorGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal",
                                homeCentreBackScissorGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorGoalTime = tvTimer.text.toString()
                        val scissorGoalData = hashMapOf(
                            "time" to scissorGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "scissor_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(scissorGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(scissorGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->
                        val currentOtherGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreBackOtherGoal =
                            documentSnapshot.getLong("${tvHomeCentreBackName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeCentreBackOtherGoal = currentCentreBackOtherGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal", homeCentreBackOtherGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeCentreBackName.text}",
                            "action" to "other_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                            }

                        //masukkan data time ke dalam field ${tvHomeCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeCentreBackName.text}_goal_times",
                                FieldValue.arrayUnion(otherGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }
        }
    }

    private fun showHomeLeftBackDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()

        alertDialog.show()

        val homeLeftBackName = findViewById<TextView>(R.id.tv_goal_player3_name_home)
        val tvName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvName.text = "Aksi Pemain: ${homeLeftBackName.text}"

        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentShootFail =
                        documentSnapshot.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentLeftBackShootFail =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeLeftBackShootFail = currentLeftBackShootFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_shoot_fail", homeLeftBackShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("shoot_fail")
                        .add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_shoot_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentAssist = documentSnapshot.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentLeftBackAssist =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeLeftBackAssist = currentLeftBackAssist + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_assist", homeLeftBackAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "assist",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("assist")
                        .add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_assist_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val current10mFail =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentLeftBack10mFail =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeLeftBack10mFail = currentLeftBack10mFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_10m_fail", homeLeftBack10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val fail10mTime = tvTimer.text.toString()
                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_10m_fail_times", fail10mTime)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_10m_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_10m_fail_times",
                            FieldValue.arrayUnion(fail10mTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btn10mgoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mgoal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val current10mGoal =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentLeftBack10mGoal =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_10m_goal") ?: 0
                    val home10mGoal = current10mGoal + 1
                    val homeLeftBack10mGoal = currentLeftBack10mGoal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_10m_goal", homeLeftBack10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val goal10mTime = tvTimer.text.toString()
                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_10m_goal_times", goal10mTime)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_10m_goal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_10m_goal_times",
                            FieldValue.arrayUnion(goal10mTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentRedCard =
                        documentSnapshot.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentLeftBackRedCard =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeLeftBackRedCard = currentLeftBackRedCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_red_card", homeLeftBackRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()

                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "red_card"
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot written with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_red_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentYellowCard =
                        documentSnapshot.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentLeftBackYellowCard =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeLeftBackYellowCard = currentLeftBackYellowCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_yellow_card", homeLeftBackYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_yellow_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_yellow_card_times",
                            FieldValue.arrayUnion(yellowCardTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->

                    val currentSteal = documentSnapshot.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentLeftBackSteal =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeLeftBackSteal = currentLeftBackSteal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_steal", homeLeftBackSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "steal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("steal")
                        .add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_steal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->
                    val currentPenalty = documentSnapshot.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentLeftBackPenalty =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeLeftBackPenalty = currentLeftBackPenalty + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_penalty", homeLeftBackPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "penalty",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("penalty")
                        .add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_penalty_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->
                    val currentOffside = documentSnapshot.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentLeftBackOffside =
                        documentSnapshot.getLong("${tvHomeLeftBackName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeLeftBackOffside = currentLeftBackOffside + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    db.collection("matchStats").document(documentId)
                        .update("${tvHomeLeftBackName.text}_offside", homeLeftBackOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e -> Log.w("Error", "Error updating document", e) }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeLeftBackName.text}",
                        "action" to "offside",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("offside")
                        .add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_offside_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeLeftBackName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                }
                .addOnFailureListener { e ->
                    Log.w("Error", "Error updating document", e)
                }
        }

        val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnShootGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackShootGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeLeftBackShootGoal = currentLeftBackShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeLeftBackName.text}_goal", homeLeftBackShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(shootGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentHealGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackHealGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeLeftBackHealGoal = currentLeftBackHealGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeLeftBackName.text}_goal", homeLeftBackHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(healGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentValleyGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackValleyGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeLeftBackValleyGoal = currentLeftBackValleyGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal",
                                homeLeftBackValleyGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentLongGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackLongGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeLeftBackLongGoal = currentLeftBackLongGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeLeftBackName.text}_goal", homeLeftBackLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "long_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentHealedGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackHealedGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeLeftBackHealedGoal = currentLeftBackHealedGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal",
                                homeLeftBackHealedGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentLobGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackLobGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeLeftBackLobGoal = currentLeftBackLobGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeLeftBackName.text}_goal", homeLeftBackLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentFoulGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackFoulGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeFoulGoal = currentFoulGoal + 1
                        val homeLeftBackFoulGoal = currentLeftBackFoulGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeLeftBackName.text}_goal", homeLeftBackFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentReverseGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackReverseGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeLeftBackReverseGoal = currentLeftBackReverseGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal",
                                homeLeftBackReverseGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentScissorsGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackScissorsGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal")
                                ?: 0
                        val homeScissorsGoal = currentScissorsGoal + 1
                        val homeLeftBackScissorsGoal = currentLeftBackScissorsGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal",
                                homeLeftBackScissorsGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(scissorsGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentOtherGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftBackOtherGoal =
                            documentSnapshot.getLong("${tvHomeLeftBackName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeLeftBackOtherGoal = currentLeftBackOtherGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeLeftBackName.text}_goal", homeLeftBackOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeLeftBackName.text}",
                            "action" to "other_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(otherGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                    }
            }

        }

    }

    private fun showHomeRightBackDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvNamaPemain = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvNamaPemain.text = "Aksi Pemain: ${tvHomeRightBackName.text}"

        val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnShootGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val btnShotGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShotGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentShootGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackShootGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeRightBackShootGoal = currentRightBackShootGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal",
                                homeRightBackShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(shootGoalTime)
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentHealGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackHealGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeRightBackHealGoal = currentRightBackHealGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeRightBackName.text}_goal", homeRightBackHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(healGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentValleyGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackValleyGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeRightBackValleyGoal = currentRightBackValleyGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal",
                                homeRightBackValleyGoal
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentLongGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackLongGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeRightBackLongGoal = currentRightBackLongGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeRightBackName.text}_goal", homeRightBackLongGoal)
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "long_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentHealedGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackHealedGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeRightBackHealedGoal = currentRightBackHealedGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal",
                                homeRightBackHealedGoal
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentLobGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackLobGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeRightBackLobGoal = currentRightBackLobGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeRightBackName.text}_goal", homeRightBackLobGoal)
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->

                        val currentFoulGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackFoulGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeFoulGoal = currentFoulGoal + 1
                        val homeRightBackFoulGoal = currentRightBackFoulGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update("${tvHomeRightBackName.text}_goal", homeRightBackFoulGoal)
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->
                        val currentReverseGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackReverseGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal")
                                ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeRightBackReverseGoal = currentRightBackReverseGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal",
                                homeRightBackReverseGoal
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->
                        val currentScissorsGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackScissorsGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal")
                                ?: 0
                        val homeScissorsGoal = currentScissorsGoal + 1
                        val homeRightBackScissorsGoal = currentRightBackScissorsGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal",
                                homeRightBackScissorsGoal
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightBackName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(scissorsGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                    }
            }

            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener { documentSnapshot ->
                        val currentOtherGoal =
                            documentSnapshot.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightBackOtherGoal =
                            documentSnapshot.getLong("${tvHomeRightBackName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeRightBackOtherGoal = currentRightBackOtherGoal + 1

                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeRightBackName.text}_goal",
                                homeRightBackOtherGoal
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w(
                                    "Error",
                                    "Error updating document",
                                    e
                                )
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeRightBackName.text}",
                            "action" to "other_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }
                            .addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }
                    }
            }
        }

        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->
                    val currentShootFail =
                        documentSnapshot.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentRightBackShootFail =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeRightBackShootFail = currentRightBackShootFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_shoot_fail",
                            homeRightBackShootFail
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("shoot_fail")
                        .add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_shoot_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->
                    val currentAssist =
                        documentSnapshot.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentRightBackAssist =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeRightBackAssist = currentRightBackAssist + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_assist",
                            homeRightBackAssist
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "assist",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("assist")
                        .add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_assist_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()

                .addOnSuccessListener { documentSnapshot ->
                    val current10mFail =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentRightBack10mFail =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeRightBack10mFail = currentRightBack10mFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_10m_fail",
                            homeRightBack10mFail
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_fail")
                        .add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_10m_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_10m_fail_times",
                            FieldValue.arrayUnion(_10mFailTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()

                .addOnSuccessListener { documentSnapshot ->
                    val current10mGoal =
                        documentSnapshot.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentRightBack10mGoal =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_10m_goal") ?: 0
                    val home10mGoal = current10mGoal + 1
                    val homeRightBack10mGoal = currentRightBack10mGoal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_10m_goal",
                            homeRightBack10mGoal
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_goal")
                        .add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_10m_goal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_10m_goal_times",
                            FieldValue.arrayUnion(_10mGoalTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()

                .addOnSuccessListener { documentSnapshot ->
                    val currentRedCard =
                        documentSnapshot.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentRightBackRedCard =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeRightBackRedCard = currentRightBackRedCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_red_card",
                            homeRightBackRedCard
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "red_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_red_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener { documentSnapshot ->
                    val currentYellowCard =
                        documentSnapshot.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentRightBackYellowCard =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeRightBackYellowCard = currentRightBackYellowCard + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_yellow_card",
                            homeRightBackYellowCard
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_yellow_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_yellow_card_times",
                            FieldValue.arrayUnion(yellowCardTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()

                .addOnSuccessListener { documentSnapshot ->
                    val currentSteal =
                        documentSnapshot.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentRightBackSteal =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeRightBackSteal = currentRightBackSteal + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_steal",
                            homeRightBackSteal
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "steal",
                    )

                    db.collection("matchStats").document(documentId)
                        .collection("steal")
                        .add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_steal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()

                .addOnSuccessListener { documentSnapshot ->
                    val currentPenalty =
                        documentSnapshot.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentRightBackPenalty =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeRightBackPenalty = currentRightBackPenalty + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_penalty",
                            homeRightBackPenalty
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "penalty",
                    )

                    db.collection("matchStats").document(documentId)
                        .collection("penalty")
                        .add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_penalty_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()

                .addOnSuccessListener { documentSnapshot ->
                    val currentOffside =
                        documentSnapshot.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentRightBackOffside =
                        documentSnapshot.getLong("${tvHomeRightBackName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeRightBackOffside = currentRightBackOffside + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_offside",
                            homeRightBackOffside
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeRightBackName.text}",
                        "action" to "offside",
                    )

                    db.collection("matchStats").document(documentId)
                        .collection("offside")
                        .add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeRightBackName.text}_offside_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeRightBackName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                }
        }

    }

    private fun showHomeDefensiveMidfielderDialog() {
        val alertDialogBuilder = AlertDialog.Builder(this)
        val dialogView = layoutInflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        alertDialogBuilder.setView(dialogView)
        val alertDialog = alertDialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvPlayerName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvPlayerName.text = "Aksi Pemain: ${tvHomeDefensiveMidfielderName.text}"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentDefensiveMidfielderShootFail =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeDefensiveMidfielderShootFail = currentDefensiveMidfielderShootFail + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_shoot_fail",
                            homeDefensiveMidfielderShootFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "shoot_fail",
                    )

                    db.collection("matchStats").document(documentId)
                        .collection("shoot_fail")
                        .add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_shoot_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentDefensiveMidfielderAssist =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeDefensiveMidfielderAssist = currentDefensiveMidfielderAssist + 1

                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_assist",
                            homeDefensiveMidfielderAssist
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "assist",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("assist")
                        .add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_assist_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler 10mgoal
        val btn10mgoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mgoal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentDefensiveMidfielder10mGoal =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_10m_goal") ?: 0
                    val home10mGoal = current10mGoal + 1
                    val homeDefensiveMidfielder10mGoal = currentDefensiveMidfielder10mGoal + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_10m_goal",
                            homeDefensiveMidfielder10mGoal
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val goal10mTime = tvTimer.text.toString()
                    val goal10mData = hashMapOf(
                        "time" to goal10mTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_goal")
                        .add(goal10mData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_10m_goal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_10m_goal_times",
                            FieldValue.arrayUnion(goal10mTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentDefensiveMidfielderPenalty =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeDefensiveMidfielderPenalty = currentDefensiveMidfielderPenalty + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_penalty",
                            homeDefensiveMidfielderPenalty
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w(
                                "Error",
                                "Error updating document",
                                e
                            )
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "penalty",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("penalty")
                        .add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_penalty_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentDefensiveMidfielderOffside =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeDefensiveMidfielderOffside = currentDefensiveMidfielderOffside + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_offside",
                            homeDefensiveMidfielderOffside
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "offside",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("offside")
                        .add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_offside_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentDefensiveMidfielderSteal =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeDefensiveMidfielderSteal = currentDefensiveMidfielderSteal + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_steal",
                            homeDefensiveMidfielderSteal
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "steal",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("steal")
                        .add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_steal_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler yellowcard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentDefensiveMidfielderYellowCard =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeDefensiveMidfielderYellowCard =
                        currentDefensiveMidfielderYellowCard + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_yellow_card",
                            homeDefensiveMidfielderYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }
                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_yellow_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_yellow_card_times",
                            FieldValue.arrayUnion(
                                yellowCardTime
                            )
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler redcard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentDefensiveMidfielderRedCard =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeDefensiveMidfielderRedCard = currentDefensiveMidfielderRedCard + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_red_card",
                            homeDefensiveMidfielderRedCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "red_card",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("violations_card")
                        .add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_red_card_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler 10mfail
        val btn10mfail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mfail.setOnClickListener() {
            val documentId = documentId
            db.collection("matchStats").document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentTenMeterFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentDefensiveMidfielderTenMeterFail =
                        it.getLong("${tvHomeDefensiveMidfielderName.text}_10m_fail") ?: 0
                    val homeTenMeterFail = currentTenMeterFail + 1
                    val homeDefensiveMidfielderTenMeterFail =
                        currentDefensiveMidfielderTenMeterFail + 1
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", homeTenMeterFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_10m_fail",
                            homeDefensiveMidfielderTenMeterFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterFailTime = tvTimer.text.toString()
                    val tenMeterFailData = hashMapOf(
                        "time" to tenMeterFailTime,
                        "player" to "${tvHomeDefensiveMidfielderName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection("matchStats").document(documentId)
                        .collection("10m_fail")
                        .add(tenMeterFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_10m_fail_times dalam bentuk Array
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvHomeDefensiveMidfielderName.text}_10m_fail_times",
                            FieldValue.arrayUnion(tenMeterFailTime)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler btnShootGoal
        val btnShootGoalToogle = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnShootGoalToogle.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val dialogView = layoutInflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderShootGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeDefensiveMidfielderShootGoal =
                            currentDefensiveMidfielderShootGoal + 1
                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(shootGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderHealGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeDefensiveMidfielderHealGoal = currentDefensiveMidfielderHealGoal + 1
                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderHealGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(healGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderValleyGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeDefensiveMidfielderValleyGoal =
                            currentDefensiveMidfielderValleyGoal + 1
                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderValleyGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler LongGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderLongGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeDefensiveMidfielderLongGoal = currentDefensiveMidfielderLongGoal + 1
                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderLongGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "long_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                db.collection("matchStats").document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderHealedGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeDefensiveMidfielderHealedGoal =
                            currentDefensiveMidfielderHealedGoal + 1
                        db.collection("matchStats").document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderHealedGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection("matchStats").document(documentId)
                            .collection("goals")
                            .add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection("matchStats").document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderLobGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeDefensiveMidfielderLobGoal = currentDefensiveMidfielderLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderLobGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderFoulGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeFoulGoal = currentFoulGoal + 1
                        val homeDefensiveMidfielderFoulGoal = currentDefensiveMidfielderFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderFoulGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }


                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderReverseGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeDefensiveMidfielderReverseGoal =
                            currentDefensiveMidfielderReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderReverseGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal =
                            it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderScissorsGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeScissorsGoal = currentScissorsGoal + 1
                        val homeDefensiveMidfielderScissorsGoal =
                            currentDefensiveMidfielderScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal",
                                homeDefensiveMidfielderScissorsGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeDefensiveMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(scissorsGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentDefensiveMidfielderOtherGoal =
                            it.getLong("${tvHomeDefensiveMidfielderName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeDefensiveMidfielderOtherGoal =
                            currentDefensiveMidfielderOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal).addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeDefensiveMidfielderName.text}_goal",
                            homeDefensiveMidfielderOtherGoal
                        ).addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeDefensiveMidfielderName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId).collection("goals")
                            .add(otherGoalData).addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeDefensiveMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeDefensiveMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    }
            }

        }
    }

    private fun showHomeCentralMidfielderDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvPlayerName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvPlayerName.text = "Aksi Pemain: ${tvHomeCentralMidfielderName.text}"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentCentralMidfielderShootFail =
                        it.getLong("${tvHomeCentralMidfielderName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeCentralMidfielderShootFail = currentCentralMidfielderShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_shoot_fail",
                            homeCentralMidfielderShootFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("shoot_fail")
                        .add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handller assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentCentralMidfielderAssist =
                        it.getLong("${tvHomeCentralMidfielderName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeCentralMidfielderAssist = currentCentralMidfielderAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_assist",
                            homeCentralMidfielderAssist
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("assist")
                        .add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler 10mgoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentCentralMidfielder10mGoal =
                        it.getLong("${tvHomeCentralMidfielderName.text}_10m_goal") ?: 0
                    val home10mGoal = current10mGoal + 1
                    val homeCentralMidfielder10mGoal = currentCentralMidfielder10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mGoal).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_10m_goal",
                            homeCentralMidfielder10mGoal
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("10m_goal")
                        .add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_10m_goal_times",
                        FieldValue.arrayUnion(_10mGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentCentralMidfielderYellowCard =
                        it.getLong("${tvHomeCentralMidfielderName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeCentralMidfielderYellowCard = currentCentralMidfielderYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_yellow_card",
                            homeCentralMidfielderYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("violations_card")
                        .add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentCentralMidfielderPenalty =
                        it.getLong("${tvHomeCentralMidfielderName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeCentralMidfielderPenalty = currentCentralMidfielderPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_penalty",
                            homeCentralMidfielderPenalty
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("penalty")
                        .add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentCentralMidfielderOffside =
                        it.getLong("${tvHomeCentralMidfielderName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeCentralMidfielderOffside = currentCentralMidfielderOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_offside",
                            homeCentralMidfielderOffside
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("offside")
                        .add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentCentralMidfielderSteal =
                        it.getLong("${tvHomeCentralMidfielderName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeCentralMidfielderSteal = currentCentralMidfielderSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_steal",
                            homeCentralMidfielderSteal
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("steal")
                        .add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentCentralMidfielderRedCard =
                        it.getLong("${tvHomeCentralMidfielderName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeCentralMidfielderRedCard = currentCentralMidfielderRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_red_card",
                            homeCentralMidfielderRedCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("violations_card")
                        .add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mfail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentCentralMidfielder10mFail =
                        it.getLong("${tvHomeCentralMidfielderName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeCentralMidfielder10mFail = currentCentralMidfielder10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentralMidfielderName.text}_10m_fail",
                            homeCentralMidfielder10mFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvHomeCentralMidfielderName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection("10m_fail")
                        .add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentralMidfielderName.text}_10m_fail_times",
                        FieldValue.arrayUnion(_10mFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler ShootGoalToogle
        val btnShootGoalToogle = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnShootGoalToogle.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler ShootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderShootGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeCentralMidfielderShootGoal = currentCentralMidfielderShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal).addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentralMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(shootGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler HealGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderHealGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeCentralMidfielderHealGoal = currentCentralMidfielderHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal).addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderHealGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentralMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderValleyGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeCentralMidfielderValleyGoal = currentCentralMidfielderValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderValleyGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler LongGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderLongGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeCentralMidfielderLongGoal = currentCentralMidfielderLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderLongGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderHealedGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeCentralMidfielderHealedGoal = currentCentralMidfielderHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderHealedGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderLobGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeCentralMidfielderLobGoal = currentCentralMidfielderLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderLobGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //hander foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderFoulGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeFoulGoal = currentFoulGoal + 1
                        val homeCentralMidfielderFoulGoal = currentCentralMidfielderFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderFoulGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderReverseGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeCentralMidfielderReverseGoal =
                            currentCentralMidfielderReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderReverseGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderScissorsGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeScissorsGoal = currentScissorsGoal + 1
                        val homeCentralMidfielderScissorsGoal =
                            currentCentralMidfielderScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderScissorsGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal_times",
                                FieldValue.arrayUnion(scissorsGoalTime)
                            )
                            .addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentralMidfielderOtherGoal =
                            it.getLong("${tvHomeCentralMidfielderName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeCentralMidfielderOtherGoal = currentCentralMidfielderOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal).addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeCentralMidfielderName.text}_goal",
                                homeCentralMidfielderOtherGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeCentralMidfielderName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection("goals")
                            .add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeCentralMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentralMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }

    }

    private fun showHomeAttackingMidfielderDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvHomeAttackingMidfielderName = findViewById<TextView>(R.id.tv_goal_player7_name_home)
        val homeAttackMidfielderName = tvHomeAttackingMidfielderName.text.toString()
        val tvPemainAksi = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvPemainAksi.text = "Aksi Pemain: ${tvHomeAttackingMidfielderName.text}"


        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentAttackingMidfielderShootFail =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeAttackingMidfielderShootFail = currentAttackingMidfielderShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_shoot_fail",
                        homeAttackingMidfielderShootFail
                    ).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId).collection("shoot_fail")
                        .add(shootFailData).addOnSuccessListener { documentReference ->
                        Log.d("Success", "DocumentSnapshot added with ID: ${documentReference.id}")
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler Assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentAttackingMidfielderAssist =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeAttackingMidfielderAssist = currentAttackingMidfielderAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_assist",
                        homeAttackingMidfielderAssist
                    ).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId).collection("assist")
                        .add(assistData).addOnSuccessListener { documentReference ->
                        Log.d("Success", "DocumentSnapshot added with ID: ${documentReference.id}")
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentTenMeterGoal = it.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentAttackingMidfielderTenMeterGoal =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_10m_goal") ?: 0
                    val homeTenMeterGoal = currentTenMeterGoal + 1
                    val homeAttackingMidfielderTenMeterGoal =
                        currentAttackingMidfielderTenMeterGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", homeTenMeterGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_10m_goal",
                        homeAttackingMidfielderTenMeterGoal
                    ).addOnSuccessListener {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterGoalTime = tvTimer.text.toString()
                    val tenMeterGoalData = hashMapOf(
                        "time" to tenMeterGoalTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId).collection("10m_goal")
                        .add(tenMeterGoalData).addOnSuccessListener { documentReference ->
                        Log.d("Success", "DocumentSnapshot added with ID: ${documentReference.id}")
                        alertDialog.dismiss()
                    }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_10m_goal_times",
                        FieldValue.arrayUnion(tenMeterGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentAttackingMidfielderYellowCard =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeAttackingMidfielderYellowCard = currentAttackingMidfielderYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeAttackingMidfielderName.text}_yellow_card",
                            homeAttackingMidfielderYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentAttackingMidfielderPenalty =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeAttackingMidfielderPenalty = currentAttackingMidfielderPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeAttackingMidfielderName.text}_penalty",
                            homeAttackingMidfielderPenalty
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }


        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentAttackingMidfielderOffside =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeAttackingMidfielderOffside = currentAttackingMidfielderOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeAttackingMidfielderName.text}_offside",
                            homeAttackingMidfielderOffside
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentAttackingMidfielderSteal =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeAttackingMidfielderSteal = currentAttackingMidfielderSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeAttackingMidfielderName.text}_steal",
                            homeAttackingMidfielderSteal
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentAttackingMidfielderRedCard =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeAttackingMidfielderRedCard = currentAttackingMidfielderRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeAttackingMidfielderName.text}_red_card",
                            homeAttackingMidfielderRedCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                }
        }

        //handler 10mFail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentTenMeterFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentAttackingMidfielderTenMeterFail =
                        it.getLong("${tvHomeAttackingMidfielderName.text}_10m_fail") ?: 0
                    val homeTenMeterFail = currentTenMeterFail + 1
                    val homeAttackingMidfielderTenMeterFail =
                        currentAttackingMidfielderTenMeterFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", homeTenMeterFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeAttackingMidfielderName.text}_10m_fail",
                            homeAttackingMidfielderTenMeterFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterFailTime = tvTimer.text.toString()
                    val tenMeterFailData = hashMapOf(
                        "time" to tenMeterFailTime,
                        "player" to "${tvHomeAttackingMidfielderName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(tenMeterFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeAttackingMidfielderName.text}_10m_fail_times",
                        FieldValue.arrayUnion(tenMeterFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler ShootGoalToogle
        val toogleShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShootGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler ShootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderShootGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeAttackingMidfielderShootGoal =
                            currentAttackingMidfielderShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderShootGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(shootGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderValleyGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeAttackingMidfielderValleyGoal =
                            currentAttackingMidfielderValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderValleyGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(valleyGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderHealedGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeAttackingMidfielderHealedGoal =
                            currentAttackingMidfielderHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderHealedGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(healedGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderFoulGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeFoulGoal = currentFoulGoal + 1
                        val homeAttackingMidfielderFoulGoal = currentAttackingMidfielderFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderFoulGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(foulGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderScissorsGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeScissorsGoal = currentScissorsGoal + 1
                        val homeAttackingMidfielderScissorsGoal =
                            currentAttackingMidfielderScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderScissorsGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(scissorsGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderOtherGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeAttackingMidfielderOtherGoal =
                            currentAttackingMidfielderOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderOtherGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderReverseGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeAttackingMidfielderReverseGoal =
                            currentAttackingMidfielderReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderReverseGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(reverseGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderLobGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeAttackingMidfielderLobGoal = currentAttackingMidfielderLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderLobGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(lobGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderLongGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeAttackingMidfielderLongGoal = currentAttackingMidfielderLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderLongGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(longGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentAttackingMidfielderHealGoal =
                            it.getLong("${tvHomeAttackingMidfielderName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeAttackingMidfielderHealGoal = currentAttackingMidfielderHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeAttackingMidfielderName.text}_goal",
                                homeAttackingMidfielderHealGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeAttackingMidfielderName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeAttackingMidfielderName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeAttackingMidfielderName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }

    private fun showHomeLeftWingerDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvHomeLeftWingerName = findViewById<TextView>(R.id.tv_goal_player8_name_home)
        val homeLeftWingerName = tvHomeLeftWingerName.text.toString()
        val tvPemainName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvPemainName.text = "Aksi Pemain: $homeLeftWingerName"

        //handler ShootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentLeftWingerShootFail =
                        it.getLong("${tvHomeLeftWingerName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeLeftWingerShootFail = currentLeftWingerShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_shoot_fail", homeLeftWingerShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler Assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentLeftWingerAssist =
                        it.getLong("${tvHomeLeftWingerName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeLeftWingerAssist = currentLeftWingerAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_assist", homeLeftWingerAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mgoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentLeftWinger10mGoal =
                        it.getLong("${tvHomeLeftWingerName.text}_10m_goal") ?: 0
                    val home10mGoal = current10mGoal + 1
                    val homeLeftWinger10mGoal = currentLeftWinger10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_10m_goal", homeLeftWinger10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterGoalTime = tvTimer.text.toString()
                    val tenMeterGoalData = hashMapOf(
                        "time" to tenMeterGoalTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(tenMeterGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_10m_goal_times",
                        FieldValue.arrayUnion(tenMeterGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentLeftWingerYellowCard =
                        it.getLong("${tvHomeLeftWingerName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeLeftWingerYellowCard = currentLeftWingerYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeLeftWingerName.text}_yellow_card",
                            homeLeftWingerYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "yellow_card",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                }
        }

        //handler Penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentLeftWingerPenalty =
                        it.getLong("${tvHomeLeftWingerName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeLeftWingerPenalty = currentLeftWingerPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_penalty", homeLeftWingerPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentLeftWingerOffside =
                        it.getLong("${tvHomeLeftWingerName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeLeftWingerOffside = currentLeftWingerOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_offside", homeLeftWingerOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentLeftWingerSteal =
                        it.getLong("${tvHomeLeftWingerName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeLeftWingerSteal = currentLeftWingerSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_steal", homeLeftWingerSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentLeftWingerRedCard =
                        it.getLong("${tvHomeLeftWingerName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeLeftWingerRedCard = currentLeftWingerRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_red_card", homeLeftWingerRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mfail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentLeftWinger10mFail =
                        it.getLong("${tvHomeLeftWingerName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeLeftWinger10mFail = currentLeftWinger10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeLeftWingerName.text}_10m_fail", homeLeftWinger10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterFailTime = tvTimer.text.toString()
                    val tenMeterFailData = hashMapOf(
                        "time" to tenMeterFailTime,
                        "player" to "${tvHomeLeftWingerName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(tenMeterFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeLeftWingerName.text}_10m_fail_times",
                        FieldValue.arrayUnion(tenMeterFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler shootGoalToogle
        val btnShootGoalToggle = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnShootGoalToggle.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerShootGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeShootGoal = currentShootGoal + 1
                        val homeLeftWingerShootGoal = currentLeftWingerShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(shootGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerValleyGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeValleyGoal = currentValleyGoal + 1
                        val homeLeftWingerValleyGoal = currentLeftWingerValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(valleyGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerHealedGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeHealedGoal = currentHealedGoal + 1
                        val homeLeftWingerHealedGoal = currentLeftWingerHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(healedGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler Foul
            val btnFoul = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoul.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoul = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerFoul =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeFoul = currentFoul + 1
                        val homeLeftWingerFoul = currentLeftWingerFoul + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeFoul)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerFoul)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulTime = tvTimer.text.toString()
                        val foulData = hashMapOf(
                            "time" to foulTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "foul",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(foulData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_foul_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_foul_times",
                            FieldValue.arrayUnion(foulTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerScissorsGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeScissorsGoal = currentScissorsGoal + 1
                        val homeLeftWingerScissorsGoal = currentLeftWingerScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(scissorsGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerOtherGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeOtherGoal = currentOtherGoal + 1
                        val homeLeftWingerOtherGoal = currentLeftWingerOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerReverseGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeReverseGoal = currentReverseGoal + 1
                        val homeLeftWingerReverseGoal = currentLeftWingerReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(reverseGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerLobGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeLobGoal = currentLobGoal + 1
                        val homeLeftWingerLobGoal = currentLeftWingerLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(lobGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler LongGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerLongGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeLongGoal = currentLongGoal + 1
                        val homeLeftWingerLongGoal = currentLeftWingerLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvHomeLeftWingerName.text}_goal",
                                homeLeftWingerLongGoal
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(longGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    }
            }
            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentLeftWingerHealGoal =
                            it.getLong("${tvHomeLeftWingerName.text}_goal") ?: 0
                        val homeHealGoal = currentHealGoal + 1
                        val homeLeftWingerHealGoal = currentLeftWingerHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeLeftWingerName.text}_goal", homeLeftWingerHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeLeftWingerName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeLeftWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeLeftWingerName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }

    private fun showHomeRightWingerDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val homeRightWingerName = findViewById<TextView>(R.id.tv_goal_player9_name_home)
        val homeRightWingerNameString = homeRightWingerName.text.toString()
        val tvNamaPemain = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvNamaPemain.text = "Aksi Pemain: $homeRightWingerNameString"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentRightWingerShootFail =
                        it.getLong("${tvHomeRightWingerName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeRightWingerShootFail = currentRightWingerShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeRightWingerName.text}_shoot_fail",
                            homeRightWingerShootFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler Assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentRightWingerAssist =
                        it.getLong("${tvHomeRightWingerName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeRightWingerAssist = currentRightWingerAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_assist", homeRightWingerAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mgoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentRightWinger10mGoal =
                        it.getLong("${tvHomeRightWingerName.text}_10m_goal") ?: 0
                    val home10mGoal = current10mGoal + 1
                    val homeRightWinger10mGoal = currentRightWinger10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", home10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_10m_goal", homeRightWinger10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterGoalTime = tvTimer.text.toString()
                    val tenMeterGoalData = hashMapOf(
                        "time" to tenMeterGoalTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(tenMeterGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_10m_goal_times",
                        FieldValue.arrayUnion(tenMeterGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler Yellow Card
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentRightWingerYellowCard =
                        it.getLong("${tvHomeRightWingerName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeRightWingerYellowCard = currentRightWingerYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeRightWingerName.text}_yellow_card",
                            homeRightWingerYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "yellow_card",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentRightWingerPenalty =
                        it.getLong("${tvHomeRightWingerName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeRightWingerPenalty = currentRightWingerPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_penalty", homeRightWingerPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "penalty",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentRightWingerOffside =
                        it.getLong("${tvHomeRightWingerName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeRightWingerOffside = currentRightWingerOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_offside", homeRightWingerOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "offside",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentRightWingerSteal =
                        it.getLong("${tvHomeRightWingerName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeRightWingerSteal = currentRightWingerSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_steal", homeRightWingerSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "steal",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentRightWingerRedCard =
                        it.getLong("${tvHomeRightWingerName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeRightWingerRedCard = currentRightWingerRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_red_card", homeRightWingerRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "red_card",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }


                }
        }

        //handler 10mfail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentRightWinger10mFail =
                        it.getLong("${tvHomeRightWingerName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeRightWinger10mFail = currentRightWinger10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeRightWingerName.text}_10m_fail", homeRightWinger10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val tenMeterFailTime = tvTimer.text.toString()
                    val tenMeterFailData = hashMapOf(
                        "time" to tenMeterFailTime,
                        "player" to "${tvHomeRightWingerName.text}",
                        "action" to "10m_fail",
                    )

                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(tenMeterFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeRightWingerName.text}_10m_fail_times",
                        FieldValue.arrayUnion(tenMeterFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler ToogleShootGoalOption
        val btnToogleShootGoalOption = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnToogleShootGoalOption.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }


                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "lob_goal",
                        )

                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "long_goal",
                        )

                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentRightWingerGoal =
                            it.getLong("${tvHomeRightWingerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeRightWingerGoal = currentRightWingerGoal + 1

                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeRightWingerName.text}_goal", homeRightWingerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()

                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeRightWingerName.text}",
                            "action" to "heal_goal",
                        )

                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeRightWingerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeRightWingerName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }


    private fun setLeagueDate() {
        matchDate = intent.getStringExtra("matchDate").toString()
        println("Tanggal Match Yang Diterima: $matchDate")

        tvLeagueDate = findViewById<TextView>(R.id.league_date)
        tvLeagueDate.text = matchDate
    }

    @SuppressLint("SetTextI18n")
    private fun setLeagueName() {
        matchName = intent.getStringExtra("matchName").toString()
        println("Nama Match Yang Diterima: $matchName")

        tvLeagueName = findViewById<TextView>(R.id.league_name)
        tvLeagueName.text = matchName
    }

    @SuppressLint("SetTextI18n")
    private fun setHomeTeam() {
        homeTeam = intent.getStringExtra("matchHomeTeam").toString()
        println("Nama Home Team Yang Diterima: $homeTeam")

        tvTeamHome = findViewById<TextView>(R.id.team_name_home)
        tvTeamHome.text = homeTeam
    }

    @SuppressLint("SetTextI18n")
    private fun setAwayTeam() {
        awayTeam = intent.getStringExtra("matchAwayTeam").toString()
        Log.d("Away Team: ", awayTeam.toString())

        tvTeamAway = findViewById<TextView>(R.id.team_name_away)
        tvTeamAway.text = awayTeam
    }

    @SuppressLint("SetTextI18n")
    private fun setMatchDuration() {
        matchDuration = intent.getStringExtra("matchDuration").toString()
        Log.d("Durasi Match: ", matchDuration.toString())

        val durationParts = matchDuration.split(":")
        if (durationParts.size == 3) {
            val hours = durationParts[0].toLong()
            val minutes = durationParts[1].toLong()
            val seconds = durationParts[2].toLong()

            val totalMilliseconds = hours * 3600000 + minutes * 60000 + seconds * 1000

            object : CountDownTimer(totalMilliseconds, 1000) {
                override fun onTick(millisUntilFinished: Long) {
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val remainingSeconds = millisUntilFinished / 1000
                    val remainingMinutes = remainingSeconds / 60
                    val remainingHours = remainingMinutes / 60
                    val formattedTime = String.format(
                        "%02d:%02d:%02d",
                        remainingHours,
                        remainingMinutes % 60,
                        remainingSeconds % 60
                    )
                    tvTimer.text = formattedTime
                }

                @SuppressLint("SetTextI18n")
                override fun onFinish() {
                    tvTimer = findViewById<TextView>(R.id.timerTextView)
                    tvTimer.text = "00:00:00"
                }
            }.start()
        } else {
            //jika durasi match tidak diisi maka timer akan berjalan selama 90 menit
            val totalMilliseconds = 5400000

            object : CountDownTimer(totalMilliseconds.toLong(), 1000) {
                override fun onTick(millisUntilFinished: Long) {
                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val remainingSeconds = millisUntilFinished / 1000
                    val remainingMinutes = remainingSeconds / 60
                    val remainingHours = remainingMinutes / 60
                    val formattedTime = String.format(
                        "%02d:%02d:%02d",
                        remainingHours,
                        remainingMinutes % 60,
                        remainingSeconds % 60
                    )
                    tvTimer.text = formattedTime
                }

                @SuppressLint("SetTextI18n")
                override fun onFinish() {
                    tvTimer = findViewById<TextView>(R.id.timerTextView)
                    tvTimer.text = "00:00:00"
                }
            }.start()
        }
    }

    private fun getHomeTeamGoalKeeper(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Goal Keeper")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeGoalKeeper = document.getString("nama_pemain").toString()
                    Log.d("Home Goal Keeper: ", teamHomeGoalKeeper)

                    tvHomeGoalKeeperName = findViewById<TextView>(R.id.tv_goal_player1_name_home)
                    tvHomeGoalKeeperName.text = teamHomeGoalKeeper

                    val gkConstraint = findViewById<ConstraintLayout>(R.id.gk_constraint_home)
                    gkConstraint.setOnClickListener() {
                        showGoalKeeperDialog()
                    }

                    val namaHomeGoalKeeper = "${tvHomeGoalKeeperName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_goal_keeper", namaHomeGoalKeeper)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val role = "Goal Keeper"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player1_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }
                }
            }

    }


    private fun getHomeTeamCentreBack(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Centre Back")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeCentreBack = document.getString("nama_pemain").toString()
                    Log.d("Home Centre Back: ", teamHomeCentreBack)

                    tvHomeCentreBackName = findViewById<TextView>(R.id.tv_goal_player2_name_home)
                    tvHomeCentreBackName.text = teamHomeCentreBack

                    val centreBackConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_centreback)
                    centreBackConstraint.setOnClickListener() {
                        showHomeCentreBackDialog()
                    }

                    val namaHomeCentreBack = "${tvHomeCentreBackName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_centre_back", namaHomeCentreBack)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Centre Back"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player2_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getHomeTeamLeftBack(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Left Back")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeLeftBack = document.getString("nama_pemain").toString()
                    Log.d("Home Left Back: ", teamHomeLeftBack)

                    tvHomeLeftBackName = findViewById<TextView>(R.id.tv_goal_player3_name_home)
                    tvHomeLeftBackName.text = teamHomeLeftBack

                    val leftBackConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_lefback)
                    leftBackConstraint.setOnClickListener() {
                        showHomeLeftBackDialog()
                    }

                    val namaHomeLeftBack = "${tvHomeLeftBackName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_left_back", namaHomeLeftBack)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Left Back"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player3_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getHomeTeamRightBack(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Right Back")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeRightBack = document.getString("nama_pemain").toString()
                    Log.d("Home Right Back: ", teamHomeRightBack)

                    tvHomeRightBackName = findViewById<TextView>(R.id.tv_goal_player4_name_home)
                    tvHomeRightBackName.text = teamHomeRightBack

                    val rightBackConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_rightback)
                    rightBackConstraint.setOnClickListener() {
                        showHomeRightBackDialog()
                    }

                    val namaHomeRightBack = "${tvHomeRightBackName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_right_back", namaHomeRightBack)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Right Back"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player4_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getHomeTeamDefensiveMidfielder(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Defensive Midfielder")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeDefensiveMidfielder = document.getString("nama_pemain").toString()
                    Log.d("Home Defensive Midfielder: ", teamHomeDefensiveMidfielder)

                    tvHomeDefensiveMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player5_name_home)
                    tvHomeDefensiveMidfielderName.text = teamHomeDefensiveMidfielder

                    val defensiveMidfielderConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_defensive_midfielder)
                    defensiveMidfielderConstraint.setOnClickListener() {
                        showHomeDefensiveMidfielderDialog()
                    }
                    val nameHomeDefensiveMidfielder = "${tvHomeDefensiveMidfielderName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvTeamHome.text}_defensive_midfielder",
                            nameHomeDefensiveMidfielder
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Defensive Midfielder"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player5_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getHomeTeamCentralMidfielder(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Central Midfielder")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeCentralMidfielder = document.getString("nama_pemain").toString()
                    Log.d("Home Central Midfielder: ", teamHomeCentralMidfielder)

                    tvHomeCentralMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player6_name_home)
                    tvHomeCentralMidfielderName.text = teamHomeCentralMidfielder

                    val centralMidfielderConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_central_midfielder)
                    centralMidfielderConstraint.setOnClickListener() {
                        showHomeCentralMidfielderDialog()
                    }

                    val nameHomeCentralMidfielder = "${tvHomeCentralMidfielderName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_central_midfielder", nameHomeCentralMidfielder)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Central Midfielder"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player6_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getHomeTeamAttackingMidfielder(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Attacking Midfielder")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeAttackingMidfielder = document.getString("nama_pemain").toString()
                    Log.d("Home Attacking Midfielder: ", teamHomeAttackingMidfielder)

                    tvHomeAttackingMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player7_name_home)
                    tvHomeAttackingMidfielderName.text = teamHomeAttackingMidfielder

                    val attackingMidfielderConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_attacking_midfielder)
                    attackingMidfielderConstraint.setOnClickListener() {
                        showHomeAttackingMidfielderDialog()
                    }

                    val nameHomeAttackingMidfielder = "${tvHomeAttackingMidfielderName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvTeamHome.text}_attacking_midfielder",
                            nameHomeAttackingMidfielder
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Attacking Midfielder"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player7_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getHomeTeamLeftWinger(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Left Winger")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeLeftWinger = document.getString("nama_pemain").toString()
                    Log.d("Home Left Winger: ", teamHomeLeftWinger)

                    tvHomeLeftWingerName = findViewById<TextView>(R.id.tv_goal_player8_name_home)
                    tvHomeLeftWingerName.text = teamHomeLeftWinger

                    val leftWingerConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_left_winger)
                    leftWingerConstraint.setOnClickListener() {
                        showHomeLeftWingerDialog()
                    }

                    val nameHomeLeftWinger = "${tvHomeLeftWingerName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_left_winger", nameHomeLeftWinger)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Left Winger"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player8_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }


    private fun getHomeTeamRightWinger(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Right Winger")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeRightWinger = document.getString("nama_pemain").toString()
                    Log.d("Home Right Winger: ", teamHomeRightWinger)

                    tvHomeRightWingerName = findViewById<TextView>(R.id.tv_goal_player9_name_home)
                    tvHomeRightWingerName.text = teamHomeRightWinger

                    val rightWingerConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_right_winger)
                    rightWingerConstraint.setOnClickListener() {
                        showHomeRightWingerDialog()
                    }

                    val nameHomeRightWinger = "${tvHomeRightWingerName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_right_winger", nameHomeRightWinger)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Right Winger"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player9_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }


    private fun getHomeTeamCentreForward(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Centre Forward")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeCentreForward = document.getString("nama_pemain").toString()
                    Log.d("Home Centre Forward: ", teamHomeCentreForward)

                    tvHomeCentreForwardName =
                        findViewById<TextView>(R.id.tv_goal_player10_name_home)
                    tvHomeCentreForwardName.text = teamHomeCentreForward

                    val centreForwardConstraint =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_centre_forward)
                    centreForwardConstraint.setOnClickListener() {
                        showHomeCentreForwardDialog()
                    }

                    val nameHomeCentreForward = "${tvHomeCentreForwardName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_centre_forward", nameHomeCentreForward)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }
                        .addOnFailureListener { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Centre Forward"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvPlayerNumber =
                                findViewById<TextView>(R.id.tv_goal_player10_number_home)
                            for (document in it) {
                                val playerNumber = document.getString("no_punggung").toString()
                                tvPlayerNumber.text = playerNumber
                            }
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showHomeCentreForwardDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvHomeCentreForwardName = findViewById<TextView>(R.id.tv_goal_player10_name_home)
        val homeCentreForwardName = tvHomeCentreForwardName.text.toString()
        val tvNamaPemain = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvNamaPemain.text = "Aksi Pemain: $homeCentreForwardName"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail") ?: 0
                    val currentCentreForwardShootFail =
                        it.getLong("${tvHomeCentreForwardName.text}_shoot_fail") ?: 0
                    val homeShootFail = currentShootFail + 1
                    val homeCentreForwardShootFail = currentCentreForwardShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentreForwardName.text}_shoot_fail",
                            homeCentreForwardShootFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist") ?: 0
                    val currentCentreForwardAssist =
                        it.getLong("${tvHomeCentreForwardName.text}_assist") ?: 0
                    val homeAssist = currentAssist + 1
                    val homeCentreForwardAssist = currentCentreForwardAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeCentreForwardName.text}_assist", homeCentreForwardAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                    val currentCentreForwardGoal =
                        it.getLong("${tvHomeCentreForwardName.text}_10m_goal") ?: 0
                    val homeGoal = currentGoal + 1
                    val homeCentreForwardGoal = currentCentreForwardGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_goal", homeGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeCentreForwardName.text}_10m_goal", homeCentreForwardGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val goalTime = tvTimer.text.toString()
                    val goalData = hashMapOf(
                        "time" to goalTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(goalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_10m_goal_times",
                        FieldValue.arrayUnion(goalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentCentreForwardYellowCard =
                        it.getLong("${tvHomeCentreForwardName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeCentreForwardYellowCard = currentCentreForwardYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentreForwardName.text}_yellow_card",
                            homeCentreForwardYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentCentreForwardPenalty =
                        it.getLong("${tvHomeCentreForwardName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeCentreForwardPenalty = currentCentreForwardPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeCentreForwardName.text}_penalty", homeCentreForwardPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentCentreForwardOffside =
                        it.getLong("${tvHomeCentreForwardName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeCentreForwardOffside = currentCentreForwardOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeCentreForwardName.text}_offside", homeCentreForwardOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentCentreForwardSteal =
                        it.getLong("${tvHomeCentreForwardName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeCentreForwardSteal = currentCentreForwardSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeCentreForwardName.text}_steal", homeCentreForwardSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentCentreForwardRedCard =
                        it.getLong("${tvHomeCentreForwardName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeCentreForwardRedCard = currentCentreForwardRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentreForwardName.text}_red_card",
                            homeCentreForwardRedCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mfail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentCentreForward10mFail =
                        it.getLong("${tvHomeCentreForwardName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeCentreForward10mFail = currentCentreForward10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeCentreForwardName.text}_10m_fail",
                            homeCentreForward10mFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val fail10mTime = tvTimer.text.toString()
                    val fail10mData = hashMapOf(
                        "time" to fail10mTime,
                        "player" to "${tvHomeCentreForwardName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(fail10mData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeCentreForwardName.text}_10m_fail_times",
                        FieldValue.arrayUnion(fail10mTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler toogleShoot
        val btnToogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnToogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            val alertDialog = dialogBuilder.create()
            alertDialog.setView(dialogView)
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val goalTime = tvTimer.text.toString()
                        val goalData = hashMapOf(
                            "time" to goalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(goalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(valleyGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(healedGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "foul_goal",
                        )

                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(foulGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "scissors_goal",
                        )

                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(scissorsGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(reverseGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(lobGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(longGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentCentreForwardGoal =
                            it.getLong("${tvHomeCentreForwardName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeCentreForwardGoal = currentCentreForwardGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal).addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeCentreForwardName.text}_goal", homeCentreForwardGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeCentreForwardName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeCentreForwardName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeCentreForwardName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }

    private fun getHomeSecondStriker(teamHomeDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamHomeDocId)
            .whereEqualTo("role_pemain", "Second Striker")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamHomeSecondStriker = document.getString("nama_pemain").toString()
                    Log.d("Home Second Striker: ", teamHomeSecondStriker)

                    tvHomeSecondStrikerName =
                        findViewById<TextView>(R.id.tv_goal_player11_name_home)
                    tvHomeSecondStrikerName.text = teamHomeSecondStriker

                    val btnHomeSecondStrikerGoal =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_home_second_striker)
                    btnHomeSecondStrikerGoal.setOnClickListener() {
                        showHomeSecondStrikerDialog()
                    }

                    val nameSecondStriker = tvHomeSecondStrikerName.text.toString()
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamHome.text}_second_striker", nameSecondStriker)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Second Striker"
                    val teamHomeDocumentId = teamHomeDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamHomeDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            for (document in it) {
                                val tvSecondStrikerNumber =
                                    findViewById<TextView>(R.id.tv_goal_player11_number_home)
                                tvSecondStrikerNumber.text =
                                    document.getString("no_punggung").toString()
                            }
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showHomeSecondStrikerDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        var alertDialog = dialogBuilder.create()
        alertDialog.show()

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamHome.text}_shoot_fail")
                    val homeShootFail = currentShootFail?.plus(1)
                    val currentSecondStrikerShootFail =
                        it.getLong("${tvHomeSecondStrikerName.text}_shoot_fail")
                    val homeSecondStrikerShootFail = currentSecondStrikerShootFail?.plus(1)
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_shoot_fail", homeShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeSecondStrikerName.text}_shoot_fail",
                            homeSecondStrikerShootFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamHome.text}_assist")
                    val homeAssist = currentAssist?.plus(1)
                    val currentSecondStrikerAssist =
                        it.getLong("${tvHomeSecondStrikerName.text}_assist")
                    val homeSecondStrikerAssist = currentSecondStrikerAssist?.plus(1)
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_assist", homeAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeSecondStrikerName.text}_assist", homeSecondStrikerAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "goals"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentGoal = it.getLong("${tvTeamHome.text}_10m_goal") ?: 0
                    val currentSecondStrikerGoal =
                        it.getLong("${tvHomeSecondStrikerName.text}_10m_goal") ?: 0
                    val homeGoal = currentGoal + 1
                    val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_goal", homeGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeSecondStrikerName.text}_10m_goal", homeSecondStrikerGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val goal10mTime = tvTimer.text.toString()
                    val goal10mData = hashMapOf(
                        "time" to goal10mTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(goal10mData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_10m_goal_times",
                        FieldValue.arrayUnion(goal10mTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler YellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val currentSecondStrikerYellowCard =
                        it.getLong("${tvHomeSecondStrikerName.text}_yellow_card") ?: 0
                    val homeYellowCard = currentYellowCard + 1
                    val homeSecondStrikerYellowCard = currentSecondStrikerYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_yellow_card", homeYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeSecondStrikerName.text}_yellow_card",
                            homeSecondStrikerYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }
                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val currentSecondStrikerRedCard =
                        it.getLong("${tvHomeSecondStrikerName.text}_red_card") ?: 0
                    val homeRedCard = currentRedCard + 1
                    val homeSecondStrikerRedCard = currentSecondStrikerRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_red_card", homeRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvHomeSecondStrikerName.text}_red_card",
                            homeSecondStrikerRedCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamHome.text}_penalty") ?: 0
                    val currentSecondStrikerPenalty =
                        it.getLong("${tvHomeSecondStrikerName.text}_penalty") ?: 0
                    val homePenalty = currentPenalty + 1
                    val homeSecondStrikerPenalty = currentSecondStrikerPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_penalty", homePenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeSecondStrikerName.text}_penalty", homeSecondStrikerPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }


                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "offside"
            db.collection(documentId).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamHome.text}_offside") ?: 0
                    val currentSecondStrikerOffside =
                        it.getLong("${tvHomeSecondStrikerName.text}_offside") ?: 0
                    val homeOffside = currentOffside + 1
                    val homeSecondStrikerOffside = currentSecondStrikerOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_offside", homeOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeSecondStrikerName.text}_offside", homeSecondStrikerOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamHome.text}_steal") ?: 0
                    val currentSecondStrikerSteal =
                        it.getLong("${tvHomeSecondStrikerName.text}_steal") ?: 0
                    val homeSteal = currentSteal + 1
                    val homeSecondStrikerSteal = currentSecondStrikerSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_steal", homeSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvHomeSecondStrikerName.text}_steal", homeSecondStrikerSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mFail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamHome.text}_10m_fail") ?: 0
                    val currentSecondStriker10mFail =
                        it.getLong("${tvHomeSecondStrikerName.text}_10m_fail") ?: 0
                    val home10mFail = current10mFail + 1
                    val homeSecondStriker10mFail = currentSecondStriker10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamHome.text}_10m_fail", home10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(documentId).document(documentId)
                        .update(
                            "${tvHomeSecondStrikerName.text}_10m_fail",
                            homeSecondStriker10mFail
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val fail10mTime = tvTimer.text.toString()
                    val fail10mData = hashMapOf(
                        "time" to fail10mTime,
                        "player" to "${tvHomeSecondStrikerName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(fail10mData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvHomeSecondStrikerName.text}_10m_fail_times",
                        FieldValue.arrayUnion(fail10mTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler toogleShootGoal
        val btnToogleShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnToogleShootGoal.setOnClickListener() {
            var dialogBuilder = AlertDialog.Builder(this)
            var inflater = this.layoutInflater
            var dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            var alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(shootGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "valley_goal",
                        )

                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(valleyGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(healedGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(foulGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(scissorsGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(reverseGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(lobGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(longGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${tvTeamHome.text}_goal") ?: 0
                        val currentSecondStrikerGoal =
                            it.getLong("${tvHomeSecondStrikerName.text}_goal") ?: 0
                        val homeGoal = currentGoal + 1
                        val homeSecondStrikerGoal = currentSecondStrikerGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamHome.text}_goal", homeGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvHomeSecondStrikerName.text}_goal", homeSecondStrikerGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvHomeSecondStrikerName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvHomeSecondStrikerName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvHomeSecondStrikerName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }

    private fun getHomeTeamDocumentId() {
        val team = intent.getStringExtra("matchHomeTeam")
        Log.d("Nama Team Home: ", team.toString())

        db.collection("team")
            .whereEqualTo("nama_team", team)
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    val documentId = document.id
                    Log.d("Document Id: ", documentId.toString())
                    teamHomeDocId = documentId

                    getHomeTeamGoalKeeper(teamHomeDocId)
                    getHomeTeamCentreBack(teamHomeDocId)
                    getHomeTeamLeftBack(teamHomeDocId)
                    getHomeTeamRightBack(teamHomeDocId)
                    getHomeTeamDefensiveMidfielder(teamHomeDocId)
                    getHomeTeamCentralMidfielder(teamHomeDocId)
                    getHomeTeamAttackingMidfielder(teamHomeDocId)
                    getHomeTeamLeftWinger(teamHomeDocId)
                    getHomeTeamRightWinger(teamHomeDocId)
                    getHomeTeamCentreForward(teamHomeDocId)
                    getHomeSecondStriker(teamHomeDocId)
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getAwayTeamDocumentId() {
        val team = intent.getStringExtra("matchAwayTeam")
        Log.d("Nama Team Away: ", team.toString())

        //mencari documentId dari teaqm yang dipilih
        db.collection("team")
            .whereEqualTo("nama_team", team)
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    val documentId = document.id
                    Log.d("Document Id: ", documentId.toString())
                    teamAwayDocId = documentId
                    getAwayTeamGoalKeeper(teamAwayDocId)
                    getAwayTeamCentreBack(teamAwayDocId)
                    getAwayTeamLeftBack(teamAwayDocId)
                    getAwayTeamRightBack(teamAwayDocId)
                    getAwayTeamDefensiveMidfielder(teamAwayDocId)
                    getAwayTeamCentralMidfielder(teamAwayDocId)
                    getAwayTeamAttackingMidfielder(teamAwayDocId)
                    getAwayTeamLeftWinger(teamAwayDocId)
                    getAwayTeamRightWinger(teamAwayDocId)
                    getAwayTeamCentreForward(teamAwayDocId)
                    getAwayTeamSecondStriker(teamAwayDocId)
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun getAwayTeamGoalKeeper(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Goal Keeper")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayGoalKeeper = document.getString("nama_pemain").toString()
                    Log.d("Away Goal Keeper: ", teamAwayGoalKeeper)

                    tvAwayGoalKeeperName = findViewById<TextView>(R.id.tv_goal_player1_name_away)
                    tvAwayGoalKeeperName.text = teamAwayGoalKeeper

                    val goalKeeperName = tvAwayGoalKeeperName.text.toString()
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_goal_keeper", goalKeeperName)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error updating document", e)
                    }

                    val role = "Goal Keeper"
                    val teamAwayDocumentId = teamAwayDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener { documents ->
                            for (document in documents) {
                                val tvAwayGoalKeeper =
                                    findViewById<TextView>(R.id.tv_goal_player1_number_away)
                                tvAwayGoalKeeper.text = document.getString("no_punggung").toString()
                            }
                        }
                        .addOnFailureListener { exception ->
                            Log.w("Error", "Error getting documents: ", exception)
                        }

                    val gkNumber =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_goalkeeper)
                    gkNumber.setOnClickListener() {
                        showAwayGoalKeeperDialog()
                    }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showAwayGoalKeeperDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvNamePemain = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvNamePemain.text = "Aksi Pemain: ${tvAwayGoalKeeperName.text}"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamAway.text}_shoot_fail") ?: 0
                    val goalKeeperShootFail =
                        it.getLong("${tvAwayGoalKeeperName.text}_shoot_fail") ?: 0
                    val awayShootFail = currentShootFail + 1
                    val awayGoalKeeperShootFail = goalKeeperShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_shoot_fail", awayShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_shoot_fail", awayGoalKeeperShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamAway.text}_assist") ?: 0
                    val goalKeeperAssist = it.getLong("${tvAwayGoalKeeperName.text}_assist") ?: 0
                    val awayAssist = currentAssist + 1
                    val awayGoalKeeperAssist = goalKeeperAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_assist", awayAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_assist", awayGoalKeeperAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamAway.text}_10m_goal") ?: 0
                    val goalKeeper10mGoal = it.getLong("${tvAwayGoalKeeperName.text}_10m_goal") ?: 0
                    val away10mGoal = current10mGoal + 1
                    val awayGoalKeeper10mGoal = goalKeeper10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_goal", away10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_10m_goal", awayGoalKeeper10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_10m_goal_times",
                        FieldValue.arrayUnion(_10mGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler YellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val goalKeeperYellowCard =
                        it.getLong("${tvAwayGoalKeeperName.text}_yellow_card") ?: 0
                    val awayYellowCard = currentYellowCard + 1
                    val awayGoalKeeperYellowCard = goalKeeperYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_yellow_card", awayYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayGoalKeeperName.text}_yellow_card",
                            awayGoalKeeperYellowCard
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val goalKeeperRedCard = it.getLong("${tvAwayGoalKeeperName.text}_red_card") ?: 0
                    val awayRedCard = currentRedCard + 1
                    val awayGoalKeeperRedCard = goalKeeperRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_red_card", awayRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_red_card", awayGoalKeeperRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamAway.text}_penalty") ?: 0
                    val goalKeeperPenalty = it.getLong("${tvAwayGoalKeeperName.text}_penalty") ?: 0
                    val awayPenalty = currentPenalty + 1
                    val awayGoalKeeperPenalty = goalKeeperPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_penalty", awayPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_penalty", awayGoalKeeperPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamAway.text}_offside") ?: 0
                    val goalKeeperOffside = it.getLong("${tvAwayGoalKeeperName.text}_offside") ?: 0
                    val awayOffside = currentOffside + 1
                    val awayGoalKeeperOffside = goalKeeperOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_offside", awayOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_offside", awayGoalKeeperOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamAway.text}_steal") ?: 0
                    val goalKeeperSteal = it.getLong("${tvAwayGoalKeeperName.text}_steal") ?: 0
                    val awaySteal = currentSteal + 1
                    val awayGoalKeeperSteal = goalKeeperSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_steal", awaySteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_steal", awayGoalKeeperSteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mFail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamAway.text}_10m_fail") ?: 0
                    val goalKeeper10mFail = it.getLong("${tvAwayGoalKeeperName.text}_10m_fail") ?: 0
                    val away10mFail = current10mFail + 1
                    val awayGoalKeeper10mFail = goalKeeper10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_fail", away10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayGoalKeeperName.text}_10m_fail", awayGoalKeeper10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvAwayGoalKeeperName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayGoalKeeperName.text}_10m_fail_times",
                        FieldValue.arrayUnion(_10mFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler toogleShootGoal
        val toogleShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShootGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperShootGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayShootGoal = currentShootGoal + 1
                        val awayGoalKeeperShootGoal = goalKeeperShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(shootGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperValleyGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayValleyGoal = currentValleyGoal + 1
                        val awayGoalKeeperValleyGoal = goalKeeperValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(valleyGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperHealedGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayHealedGoal = currentHealedGoal + 1
                        val awayGoalKeeperHealedGoal = goalKeeperHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(healedGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperFoulGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayFoulGoal = currentFoulGoal + 1
                        val awayGoalKeeperFoulGoal = goalKeeperFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(foulGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperScissorsGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayScissorsGoal = currentScissorsGoal + 1
                        val awayGoalKeeperScissorsGoal = goalKeeperScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(scissorsGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperOtherGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayOtherGoal = currentOtherGoal + 1
                        val awayGoalKeeperOtherGoal = goalKeeperOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperReverseGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayReverseGoal = currentReverseGoal + 1
                        val awayGoalKeeperReverseGoal = goalKeeperReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(reverseGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperLobGoal = it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayLobGoal = currentLobGoal + 1
                        val awayGoalKeeperLobGoal = goalKeeperLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(lobGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperLongGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayLongGoal = currentLongGoal + 1
                        val awayGoalKeeperLongGoal = goalKeeperLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(longGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                val documentId = documentId
                val collectionName = "matchStats"
                val collectionBranchName = "goals"
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val goalKeeperHealGoal =
                            it.getLong("${tvAwayGoalKeeperName.text}_goal") ?: 0
                        val awayHealGoal = currentHealGoal + 1
                        val awayGoalKeeperHealGoal = goalKeeperHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayGoalKeeperName.text}_goal", awayGoalKeeperHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvAwayGoalKeeperName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayGoalKeeperName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayGoalKeeperName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }

    private fun getAwayTeamCentreBack(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Centre Back")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayCentreBack = document.getString("nama_pemain").toString()
                    Log.d("Away Centre Back: ", teamAwayCentreBack)

                    tvAwayCentreBackName = findViewById<TextView>(R.id.tv_goal_player2_name_away)
                    tvAwayCentreBackName.text = teamAwayCentreBack

                    val awayCentreBackName = tvAwayCentreBackName.text.toString()
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_centre_back", awayCentreBackName)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    val role = "Centre Back"
                    val teamAwayDocumentId = teamAwayDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvAwayCentreBackNumber =
                                findViewById<TextView>(R.id.tv_goal_player2_number_away)
                            tvAwayCentreBackNumber.text =
                                it.documents[0].getString("no_punggung").toString()
                        }

                    val gkConstraintLayout =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_centre_back)
                    gkConstraintLayout.setOnClickListener() {
                        showAwayCentreBackDialog()
                    }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showAwayCentreBackDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)

        val tvNamaPemain = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvNamaPemain.text = "Aksi Pemain: ${tvAwayCentreBackName.text}"

        val documentId = documentId
        val collectionName = "matchStats"

        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamAway.text}_shoot_fail") ?: 0
                    val awayShootFail = currentShootFail + 1
                    val awayCentreBackShootFail =
                        it.getLong("${tvAwayCentreBackName.text}_shoot_fail") ?: 0
                    val awayCentreBackShootFailUpdated = awayCentreBackShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_shoot_fail", awayShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_shoot_fail",
                            awayCentreBackShootFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamAway.text}_assist") ?: 0
                    val awayAssist = currentAssist + 1
                    val awayCentreBackAssist =
                        it.getLong("${tvAwayCentreBackName.text}_assist") ?: 0
                    val awayCentreBackAssistUpdated = awayCentreBackAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_assist", awayAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayCentreBackName.text}_assist", awayCentreBackAssistUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val collectionBranchName = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamAway.text}_10m_goal") ?: 0
                    val away10mGoal = current10mGoal + 1
                    val awayCentreBack10mGoal =
                        it.getLong("${tvAwayCentreBackName.text}_10m_goal") ?: 0
                    val awayCentreBack10mGoalUpdated = awayCentreBack10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_goal", away10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_10m_goal",
                            awayCentreBack10mGoalUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_10m_goal_times",
                        FieldValue.arrayUnion(_10mGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val awayYellowCard = currentYellowCard + 1
                    val awayCentreBackYellowCard =
                        it.getLong("${tvAwayCentreBackName.text}_yellow_card") ?: 0
                    val awayCentreBackYellowCardUpdated = awayCentreBackYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_yellow_card", awayYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_yellow_card",
                            awayCentreBackYellowCardUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamAway.text}_penalty") ?: 0
                    val awayPenalty = currentPenalty + 1
                    val awayCentreBackPenalty =
                        it.getLong("${tvAwayCentreBackName.text}_penalty") ?: 0
                    val awayCentreBackPenaltyUpdated = awayCentreBackPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_penalty", awayPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_penalty",
                            awayCentreBackPenaltyUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranchName = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamAway.text}_offside") ?: 0
                    val awayOffside = currentOffside + 1
                    val awayCentreBackOffside =
                        it.getLong("${tvAwayCentreBackName.text}_offside") ?: 0
                    val awayCentreBackOffsideUpdated = awayCentreBackOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_offside", awayOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_offside",
                            awayCentreBackOffsideUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamAway.text}_steal") ?: 0
                    val awaySteal = currentSteal + 1
                    val awayCentreBackSteal = it.getLong("${tvAwayCentreBackName.text}_steal") ?: 0
                    val awayCentreBackStealUpdated = awayCentreBackSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_steal", awaySteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayCentreBackName.text}_steal", awayCentreBackStealUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler RedCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val awayRedCard = currentRedCard + 1
                    val awayCentreBackRedCard =
                        it.getLong("${tvAwayCentreBackName.text}_red_card") ?: 0
                    val awayCentreBackRedCardUpdated = awayCentreBackRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_red_card", awayRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_red_card",
                            awayCentreBackRedCardUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mFail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamAway.text}_10m_fail") ?: 0
                    val away10mFail = current10mFail + 1
                    val awayCentreBack10mFail =
                        it.getLong("${tvAwayCentreBackName.text}_10m_fail") ?: 0
                    val awayCentreBack10mFailUpdated = awayCentreBack10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_fail", away10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayCentreBackName.text}_10m_fail",
                            awayCentreBack10mFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvAwayCentreBackName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                        Log.w("Error", "Error adding document", e)
                    }

                    //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayCentreBackName.text}_10m_fail_times",
                        FieldValue.arrayUnion(_10mFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler toogleShoot
        val btnToogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        btnToogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "goals"

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayShootGoal = currentShootGoal + 1
                        val awayCentreBackShootGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackShootGoalUpdated = awayCentreBackShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackShootGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(shootGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayValleyGoal = currentValleyGoal + 1
                        val awayCentreBackValleyGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackValleyGoalUpdated = awayCentreBackValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackValleyGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(valleyGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayHealedGoal = currentHealedGoal + 1
                        val awayCentreBackHealedGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackHealedGoalUpdated = awayCentreBackHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackHealedGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(healedGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayFoulGoal = currentFoulGoal + 1
                        val awayCentreBackFoulGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackFoulGoalUpdated = awayCentreBackFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackFoulGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(foulGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler ScissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayScissorsGoal = currentScissorsGoal + 1
                        val awayCentreBackScissorsGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackScissorsGoalUpdated = awayCentreBackScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackScissorsGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(scissorsGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayOtherGoal = currentOtherGoal + 1
                        val awayCentreBackOtherGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackOtherGoalUpdated = awayCentreBackOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackOtherGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(otherGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayReverseGoal = currentReverseGoal + 1
                        val awayCentreBackReverseGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackReverseGoalUpdated = awayCentreBackReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackReverseGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(reverseGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayLobGoal = currentLobGoal + 1
                        val awayCentreBackLobGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackLobGoalUpdated = awayCentreBackLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackLobGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(lobGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayLongGoal = currentLongGoal + 1
                        val awayCentreBackLongGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackLongGoalUpdated = awayCentreBackLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackLongGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(longGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayHealGoal = currentHealGoal + 1
                        val awayCentreBackHealGoal =
                            it.getLong("${tvAwayCentreBackName.text}_goal") ?: 0
                        val awayCentreBackHealGoalUpdated = awayCentreBackHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayCentreBackName.text}_goal",
                                awayCentreBackHealGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvAwayCentreBackName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranchName).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                        //masukkan data time ke dalam field ${tvAwayCentreBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId).update(
                            "${tvAwayCentreBackName.text}_goal_times",
                            FieldValue.arrayUnion(healGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    }
            }
        }
    }

    private fun getAwayTeamLeftBack(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Left Back")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayLeftBack = document.getString("nama_pemain").toString()
                    Log.d("Away Left Back: ", teamAwayLeftBack)

                    tvAwayLeftBackName = findViewById<TextView>(R.id.tv_goal_player3_name_away)
                    tvAwayLeftBackName.text = teamAwayLeftBack

                    val awayLeftBackName = tvAwayLeftBackName.text.toString()
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_left_back", awayLeftBackName)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                    val role = "Left Back"
                    val teamAwayDocumentId = teamAwayDocId
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvAwayLeftBackNumber =
                                findViewById<TextView>(R.id.tv_goal_player3_number_away)
                            tvAwayLeftBackNumber.text =
                                it.documents[0].getString("no_punggung").toString()
                        }

                    val gkConstraintLayout =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_left_back)
                    gkConstraintLayout.setOnClickListener() {
                        showAwayLeftBackDialog()
                    }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showAwayLeftBackDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)

        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvPemainName = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvPemainName.text = "Aksi Pemain: ${tvAwayLeftBackName.text}"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamAway.text}_shoot_fail") ?: 0
                    val awayShootFail = currentShootFail + 1
                    val awayLeftBackShootFail =
                        it.getLong("${tvAwayLeftBackName.text}_shoot_fail") ?: 0
                    val awayLeftBackShootFailUpdated = awayLeftBackShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_shoot_fail", awayShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayLeftBackName.text}_shoot_fail",
                            awayLeftBackShootFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_shoot_fail_times",
                        FieldValue.arrayUnion(shootFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamAway.text}_assist") ?: 0
                    val awayAssist = currentAssist + 1
                    val awayLeftBackAssist = it.getLong("${tvAwayLeftBackName.text}_assist") ?: 0
                    val awayLeftBackAssistUpdated = awayLeftBackAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_assist", awayAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_assist", awayLeftBackAssistUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_assist_times",
                        FieldValue.arrayUnion(assistTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamAway.text}_10m_goal") ?: 0
                    val away10mGoal = current10mGoal + 1
                    val awayLeftBack10mGoal = it.getLong("${tvAwayLeftBackName.text}_10m_goal") ?: 0
                    val awayLeftBack10mGoalUpdated = awayLeftBack10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_goal", away10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_10m_goal", awayLeftBack10mGoalUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_10m_goal_times",
                        FieldValue.arrayUnion(_10mGoalTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler YellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val awayYellowCard = currentYellowCard + 1
                    val awayLeftBackYellowCard =
                        it.getLong("${tvAwayLeftBackName.text}_yellow_card") ?: 0
                    val awayLeftBackYellowCardUpdated = awayLeftBackYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_yellow_card", awayYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayLeftBackName.text}_yellow_card",
                            awayLeftBackYellowCardUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_yellow_card_times",
                        FieldValue.arrayUnion(yellowCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamAway.text}_penalty") ?: 0
                    val awayPenalty = currentPenalty + 1
                    val awayLeftBackPenalty = it.getLong("${tvAwayLeftBackName.text}_penalty") ?: 0
                    val awayLeftBackPenaltyUpdated = awayLeftBackPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_penalty", awayPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_penalty", awayLeftBackPenaltyUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)

                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_penalty_times",
                        FieldValue.arrayUnion(penaltyTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamAway.text}_offside") ?: 0
                    val awayOffside = currentOffside + 1
                    val awayLeftBackOffside = it.getLong("${tvAwayLeftBackName.text}_offside") ?: 0
                    val awayLeftBackOffsideUpdated = awayLeftBackOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_offside", awayOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_offside", awayLeftBackOffsideUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_offside_times",
                        FieldValue.arrayUnion(offsideTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamAway.text}_steal") ?: 0
                    val awaySteal = currentSteal + 1
                    val awayLeftBackSteal = it.getLong("${tvAwayLeftBackName.text}_steal") ?: 0
                    val awayLeftBackStealUpdated = awayLeftBackSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_steal", awaySteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_steal", awayLeftBackStealUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_steal_times",
                        FieldValue.arrayUnion(stealTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler RedCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val awayRedCard = currentRedCard + 1
                    val awayLeftBackRedCard = it.getLong("${tvAwayLeftBackName.text}_red_card") ?: 0
                    val awayLeftBackRedCardUpdated = awayLeftBackRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_red_card", awayRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_red_card", awayLeftBackRedCardUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_red_card_times",
                        FieldValue.arrayUnion(redCardTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler 10mFail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val documentId = documentId
            val collectionName = "matchStats"
            val collectionBranchName = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamAway.text}_10m_fail") ?: 0
                    val away10mFail = current10mFail + 1
                    val awayLeftBack10mFail = it.getLong("${tvAwayLeftBackName.text}_10m_fail") ?: 0
                    val awayLeftBack10mFailUpdated = awayLeftBack10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_fail", away10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayLeftBackName.text}_10m_fail", awayLeftBack10mFailUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvAwayLeftBackName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranchName).add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId).update(
                        "${tvAwayLeftBackName.text}_10m_fail_times",
                        FieldValue.arrayUnion(_10mFailTime)
                    ).addOnSuccessListener() {
                        Log.d("Success", "DocumentSnapshot successfully updated!")
                        alertDialog.dismiss()
                    }.addOnFailureListener() {
                        Log.w("Error", "Error updating document", it)
                    }

                }
        }

        //handler toogleShoot
        val toogleShootButton = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShootButton.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            val collectionName = "matchStats"
            val collectionNameBranch = "goals"
            val documentId = documentId
            dialogBuilder.setView(dialogView)

            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayShootGoal = currentShootGoal + 1
                        val awayLeftBackShootGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackShootGoalUpdated = awayLeftBackShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayLeftBackName.text}_goal", awayLeftBackShootGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(shootGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayValleyGoal = currentValleyGoal + 1
                        val awayLeftBackValleyGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackValleyGoalUpdated = awayLeftBackValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal",
                                awayLeftBackValleyGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayHealedGoal = currentHealedGoal + 1
                        val awayLeftBackHealedGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackHealedGoalUpdated = awayLeftBackHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal",
                                awayLeftBackHealedGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayFoulGoal = currentFoulGoal + 1
                        val awayLeftBackFoulGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackFoulGoalUpdated = awayLeftBackFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayLeftBackName.text}_goal", awayLeftBackFoulGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler ScissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayScissorsGoal = currentScissorsGoal + 1
                        val awayLeftBackScissorsGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackScissorsGoalUpdated = awayLeftBackScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal",
                                awayLeftBackScissorsGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(scissorsGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayOtherGoal = currentOtherGoal + 1
                        val awayLeftBackOtherGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackOtherGoalUpdated = awayLeftBackOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayLeftBackName.text}_goal", awayLeftBackOtherGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(otherGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayReverseGoal = currentReverseGoal + 1
                        val awayLeftBackReverseGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackReverseGoalUpdated = awayLeftBackReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal",
                                awayLeftBackReverseGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayLobGoal = currentLobGoal + 1
                        val awayLeftBackLobGoal = it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackLobGoalUpdated = awayLeftBackLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayLeftBackName.text}_goal", awayLeftBackLobGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayLongGoal = currentLongGoal + 1
                        val awayLeftBackLongGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackLongGoalUpdated = awayLeftBackLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayLeftBackName.text}_goal", awayLeftBackLongGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayHealGoal = currentHealGoal + 1
                        val awayLeftBackHealGoal =
                            it.getLong("${tvAwayLeftBackName.text}_goal") ?: 0
                        val awayLeftBackHealGoalUpdated = awayLeftBackHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayLeftBackName.text}_goal", awayLeftBackHealGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvAwayLeftBackName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionNameBranch).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayLeftBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayLeftBackName.text}_goal_times",
                                FieldValue.arrayUnion(healGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

        }
    }

    private fun getAwayTeamRightBack(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Right Back")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayRightBack = document.getString("nama_pemain").toString()
                    Log.d("Away Right Back: ", teamAwayRightBack)

                    tvAwayRightBackName = findViewById<TextView>(R.id.tv_goal_player4_name_away)
                    tvAwayRightBackName.text = teamAwayRightBack

                    val rightAwayBackName = tvAwayRightBackName.text.toString()
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_right_back", rightAwayBackName)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Right Back"
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvRightBackNumber =
                                findViewById<TextView>(R.id.tv_goal_player4_number_away)
                            tvRightBackNumber.text = document.getString("no_punggung").toString()
                        }

                    val gkName = findViewById<ConstraintLayout>(R.id.gk_constraint_away_right_back)
                    gkName.setOnClickListener() {
                        showAwayRigthBackDialog()
                    }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showAwayRigthBackDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvNamaPemain = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvNamaPemain.text = "Aksi Pemain: ${tvAwayRightBackName.text}"

        val documentId = documentId
        val collectionName = "matchStats"

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamAway.text}_shoot_fail") ?: 0
                    val awayShootFail = currentShootFail + 1
                    val awayRightBackShootFail =
                        it.getLong("${tvAwayRightBackName.text}_shoot_fail") ?: 0
                    val awayRightBackShootFailUpdated = awayRightBackShootFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_shoot_fail", awayShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_shoot_fail",
                            awayRightBackShootFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamAway.text}_assist") ?: 0
                    val awayAssist = currentAssist + 1
                    val awayRightBackAssist = it.getLong("${tvAwayRightBackName.text}_assist") ?: 0
                    val awayRightBackAssistUpdated = awayRightBackAssist + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_assist", awayAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_assist", awayRightBackAssistUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "assist",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_assist_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamAway.text}_10m_goal") ?: 0
                    val away10mGoal = current10mGoal + 1
                    val awayRightBack10mGoal =
                        it.getLong("${tvAwayRightBackName.text}_10m_goal") ?: 0
                    val awayRightBack10mGoalUpdated = awayRightBack10mGoal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_goal", away10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_10m_goal", awayRightBack10mGoalUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_10m_goal_times",
                            FieldValue.arrayUnion(_10mGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val awayYellowCard = currentYellowCard + 1
                    val awayRightBackYellowCard =
                        it.getLong("${tvAwayRightBackName.text}_yellow_card") ?: 0
                    val awayRightBackYellowCardUpdated = awayRightBackYellowCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_yellow_card", awayYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_yellow_card",
                            awayRightBackYellowCardUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_yellow_card_times",
                            FieldValue.arrayUnion(yellowCardTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamAway.text}_penalty") ?: 0
                    val awayPenalty = currentPenalty + 1
                    val awayRightBackPenalty =
                        it.getLong("${tvAwayRightBackName.text}_penalty") ?: 0
                    val awayRightBackPenaltyUpdated = awayRightBackPenalty + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_penalty", awayPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_penalty", awayRightBackPenaltyUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_penalty_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamAway.text}_offside") ?: 0
                    val awayOffside = currentOffside + 1
                    val awayRightBackOffside =
                        it.getLong("${tvAwayRightBackName.text}_offside") ?: 0
                    val awayRightBackOffsideUpdated = awayRightBackOffside + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_offside", awayOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_offside", awayRightBackOffsideUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "offside",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_offside_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamAway.text}_steal") ?: 0
                    val awaySteal = currentSteal + 1
                    val awayRightBackSteal = it.getLong("${tvAwayRightBackName.text}_steal") ?: 0
                    val awayRightBackStealUpdated = awayRightBackSteal + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_steal", awaySteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_steal", awayRightBackStealUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "steal",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_steal_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler RedCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val awayRedCard = currentRedCard + 1
                    val awayRightBackRedCard =
                        it.getLong("${tvAwayRightBackName.text}_red_card") ?: 0
                    val awayRightBackRedCardUpdated = awayRightBackRedCard + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_red_card", awayRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_red_card", awayRightBackRedCardUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_red_card_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler 10mFail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collectionName).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamAway.text}_10m_fail") ?: 0
                    val away10mFail = current10mFail + 1
                    val awayRightBack10mFail =
                        it.getLong("${tvAwayRightBackName.text}_10m_fail") ?: 0
                    val awayRightBack10mFailUpdated = awayRightBack10mFail + 1
                    db.collection(collectionName).document(documentId)
                        .update("${tvTeamAway.text}_10m_fail", away10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collectionName).document(documentId)
                        .update("${tvAwayRightBackName.text}_10m_fail", awayRightBack10mFailUpdated)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvAwayRightBackName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collectionName).document(documentId)
                        .collection(collectionBranch).add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayRightBackName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collectionName).document(documentId)
                        .update(
                            "${tvAwayRightBackName.text}_10m_fail_times",
                            FieldValue.arrayUnion(_10mFailTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }

        }
        val toogleShootGoal = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShootGoal.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val dialogView = layoutInflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val collectionBranch = "goals"


            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayShootGoal = currentShootGoal + 1
                        val awayRightBackShootGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackShootGoalUpdated = awayRightBackShootGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackShootGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val shootGoalTime = tvTimer.text.toString()
                        val shootGoalData = hashMapOf(
                            "time" to shootGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "shoot_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(shootGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(shootGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayValleyGoal = currentValleyGoal + 1
                        val awayRightBackValleyGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackValleyGoalUpdated = awayRightBackValleyGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackValleyGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val valleyGoalTime = tvTimer.text.toString()
                        val valleyGoalData = hashMapOf(
                            "time" to valleyGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "valley_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(valleyGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(valleyGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayHealedGoal = currentHealedGoal + 1
                        val awayRightBackHealedGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackHealedGoalUpdated = awayRightBackHealedGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackHealedGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healedGoalTime = tvTimer.text.toString()
                        val healedGoalData = hashMapOf(
                            "time" to healedGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "healed_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(healedGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(healedGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayFoulGoal = currentFoulGoal + 1
                        val awayRightBackFoulGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackFoulGoalUpdated = awayRightBackFoulGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackFoulGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val foulGoalTime = tvTimer.text.toString()
                        val foulGoalData = hashMapOf(
                            "time" to foulGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "foul_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(foulGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(foulGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler ScissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayScissorsGoal = currentScissorsGoal + 1
                        val awayRightBackScissorsGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackScissorsGoalUpdated = awayRightBackScissorsGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackScissorsGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val scissorsGoalTime = tvTimer.text.toString()
                        val scissorsGoalData = hashMapOf(
                            "time" to scissorsGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "scissors_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(scissorsGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(scissorsGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayOtherGoal = currentOtherGoal + 1
                        val awayRightBackOtherGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackOtherGoalUpdated = awayRightBackOtherGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackOtherGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val otherGoalTime = tvTimer.text.toString()
                        val otherGoalData = hashMapOf(
                            "time" to otherGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "other_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(otherGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(otherGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayReverseGoal = currentReverseGoal + 1
                        val awayRightBackReverseGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackReverseGoalUpdated = awayRightBackReverseGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackReverseGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val reverseGoalTime = tvTimer.text.toString()
                        val reverseGoalData = hashMapOf(
                            "time" to reverseGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "reverse_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(reverseGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(reverseGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayLobGoal = currentLobGoal + 1
                        val awayRightBackLobGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackLobGoalUpdated = awayRightBackLobGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update("${tvAwayRightBackName.text}_goal", awayRightBackLobGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val lobGoalTime = tvTimer.text.toString()
                        val lobGoalData = hashMapOf(
                            "time" to lobGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "lob_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(lobGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(lobGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayLongGoal = currentLongGoal + 1
                        val awayRightBackLongGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackLongGoalUpdated = awayRightBackLongGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackLongGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val longGoalTime = tvTimer.text.toString()
                        val longGoalData = hashMapOf(
                            "time" to longGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "long_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(longGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(longGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collectionName).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${tvTeamAway.text}_goal") ?: 0
                        val awayHealGoal = currentHealGoal + 1
                        val awayRightBackHealGoal =
                            it.getLong("${tvAwayRightBackName.text}_goal") ?: 0
                        val awayRightBackHealGoalUpdated = awayRightBackHealGoal + 1
                        db.collection(collectionName).document(documentId)
                            .update("${tvTeamAway.text}_goal", awayHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal",
                                awayRightBackHealGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val tvTimer = findViewById<TextView>(R.id.timerTextView)
                        val healGoalTime = tvTimer.text.toString()
                        val healGoalData = hashMapOf(
                            "time" to healGoalTime,
                            "player" to "${tvAwayRightBackName.text}",
                            "action" to "heal_goal",
                        )
                        db.collection(collectionName).document(documentId)
                            .collection(collectionBranch).add(healGoalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${tvAwayRightBackName.text}_goal_times dalam bentuk Array
                        db.collection(collectionName).document(documentId)
                            .update(
                                "${tvAwayRightBackName.text}_goal_times",
                                FieldValue.arrayUnion(healGoalTime)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }
        }
    }

    private fun getAwayTeamDefensiveMidfielder(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Defensive Midfielder")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayDefensiveMidfielder = document.getString("nama_pemain").toString()
                    Log.d("Away Defensive Midfielder: ", teamAwayDefensiveMidfielder)

                    tvAwayDefensiveMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player5_name_away)
                    tvAwayDefensiveMidfielderName.text = teamAwayDefensiveMidfielder

                    val AwayDefensiveMidfielderName = "${tvAwayDefensiveMidfielderName.text}"
                    val documentId = documentId
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvTeamAway.text}_defensive_midfielder",
                            AwayDefensiveMidfielderName
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val role = "Defensive Midfielder"
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val tvAwayDefensiveMidfielderNumber =
                                findViewById<TextView>(R.id.tv_goal_player5_number_away)
                            for (document in it) {
                                val AwayDefensiveMidfielderNumber =
                                    document.getString("no_punggung").toString()
                                tvAwayDefensiveMidfielderNumber.text = AwayDefensiveMidfielderNumber
                            }
                        }

                    val gkAwayDefensiveMidfielder =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_defensive_midfielder)
                    gkAwayDefensiveMidfielder.setOnClickListener() {
                        showAwayDefensiveMidfielderDialog()
                    }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showAwayDefensiveMidfielderDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        tvTendanganGoal.text = "Aksi Pemain: ${tvAwayDefensiveMidfielderName.text}"

        val collection = "matchStats"
        val documentId = documentId

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamAway.text}_shoot_fail") ?: 0
                    val awayShootFail = currentShootFail + 1
                    val awayDefensiveMidfielderShootFail =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_shoot_fail") ?: 0
                    val awayDefensiveMidfielderShootFailUpdated =
                        awayDefensiveMidfielderShootFail + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_shoot_fail", awayShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_shoot_fail",
                            awayDefensiveMidfielderShootFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val shootFailTime = tvTimer.text.toString()
                    val shootFailData = hashMapOf(
                        "time" to shootFailTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "shoot_fail",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(shootFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_shoot_fail_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(shootFailTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamAway.text}_assist") ?: 0
                    val awayAssist = currentAssist + 1
                    val awayDefensiveMidfielderAssist =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_assist") ?: 0
                    val awayDefensiveMidfielderAssistUpdated = awayDefensiveMidfielderAssist + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_assist", awayAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_assist",
                            awayDefensiveMidfielderAssistUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val assistTime = tvTimer.text.toString()
                    val assistData = hashMapOf(
                        "time" to assistTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "assist",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(assistData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_assist_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_assist_times",
                            FieldValue.arrayUnion(assistTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamAway.text}_10m_goal") ?: 0
                    val away10mGoal = current10mGoal + 1
                    val awayDefensiveMidfielder10mGoal =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_10m_goal") ?: 0
                    val awayDefensiveMidfielder10mGoalUpdated = awayDefensiveMidfielder10mGoal + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_10m_goal", away10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_10m_goal",
                            awayDefensiveMidfielder10mGoalUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mGoalTime = tvTimer.text.toString()
                    val _10mGoalData = hashMapOf(
                        "time" to _10mGoalTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "10m_goal",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(_10mGoalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_10m_goal_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_10m_goal_times",
                            FieldValue.arrayUnion(_10mGoalTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler yellowcard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val awayYellowCard = currentYellowCard + 1
                    val awayDefensiveMidfielderYellowCard =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_yellow_card") ?: 0
                    val awayDefensiveMidfielderYellowCardUpdated =
                        awayDefensiveMidfielderYellowCard + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_yellow_card", awayYellowCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_yellow_card",
                            awayDefensiveMidfielderYellowCardUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val yellowCardTime = tvTimer.text.toString()
                    val yellowCardData = hashMapOf(
                        "time" to yellowCardTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "yellow_card",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(yellowCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_yellow_card_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_yellow_card_times",
                            FieldValue.arrayUnion(yellowCardTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamAway.text}_penalty") ?: 0
                    val awayPenalty = currentPenalty + 1
                    val awayDefensiveMidfielderPenalty =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_penalty") ?: 0
                    val awayDefensiveMidfielderPenaltyUpdated = awayDefensiveMidfielderPenalty + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_penalty", awayPenalty)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_penalty",
                            awayDefensiveMidfielderPenaltyUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val penaltyTime = tvTimer.text.toString()
                    val penaltyData = hashMapOf(
                        "time" to penaltyTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "penalty",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(penaltyData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_penalty_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_penalty_times",
                            FieldValue.arrayUnion(penaltyTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentOffside = it.getLong("${tvTeamAway.text}_offside") ?: 0
                    val awayOffside = currentOffside + 1
                    val awayDefensiveMidfielderOffside =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_offside") ?: 0
                    val awayDefensiveMidfielderOffsideUpdated = awayDefensiveMidfielderOffside + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_offside", awayOffside)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_offside",
                            awayDefensiveMidfielderOffsideUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val offsideTime = tvTimer.text.toString()
                    val offsideData = hashMapOf(
                        "time" to offsideTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "offside",
                    )

                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(offsideData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_offside_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_offside_times",
                            FieldValue.arrayUnion(offsideTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamAway.text}_steal") ?: 0
                    val awaySteal = currentSteal + 1
                    val awayDefensiveMidfielderSteal =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_steal") ?: 0
                    val awayDefensiveMidfielderStealUpdated = awayDefensiveMidfielderSteal + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_steal", awaySteal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_steal",
                            awayDefensiveMidfielderStealUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val stealTime = tvTimer.text.toString()
                    val stealData = hashMapOf(
                        "time" to stealTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "steal",
                    )

                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(stealData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_steal_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_steal_times",
                            FieldValue.arrayUnion(stealTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler RedCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val awayRedCard = currentRedCard + 1
                    val awayDefensiveMidfielderRedCard =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_red_card") ?: 0
                    val awayDefensiveMidfielderRedCardUpdated = awayDefensiveMidfielderRedCard + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_red_card", awayRedCard)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_red_card",
                            awayDefensiveMidfielderRedCardUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val redCardTime = tvTimer.text.toString()
                    val redCardData = hashMapOf(
                        "time" to redCardTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "red_card",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(redCardData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_red_card_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_red_card_times",
                            FieldValue.arrayUnion(redCardTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }

                }
        }

        //handler 10mfail
        val btn10mFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btn10mFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamAway.text}_10m_fail") ?: 0
                    val away10mFail = current10mFail + 1
                    val awayDefensiveMidfielder10mFail =
                        it.getLong("${tvAwayDefensiveMidfielderName.text}_10m_fail") ?: 0
                    val awayDefensiveMidfielder10mFailUpdated = awayDefensiveMidfielder10mFail + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_10m_fail", away10mFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_10m_fail",
                            awayDefensiveMidfielder10mFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val tvTimer = findViewById<TextView>(R.id.timerTextView)
                    val _10mFailTime = tvTimer.text.toString()
                    val _10mFailData = hashMapOf(
                        "time" to _10mFailTime,
                        "player" to "${tvAwayDefensiveMidfielderName.text}",
                        "action" to "10m_fail",
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(_10mFailData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${tvAwayDefensiveMidfielderName.text}_10m_fail_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayDefensiveMidfielderName.text}_10m_fail_times",
                            FieldValue.arrayUnion(_10mFailTime)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }


                }
        }

        //handler toogleShoot
        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()

            val collectionBranch = "goals"
            val playerName = tvAwayDefensiveMidfielderName.text
            val teamName = tvTeamAway.text
            val timer = findViewById<TextView>(R.id.timerTextView)
            val time = timer.text.toString()

            //handler shootGoal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentShootGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayShootGoal = currentShootGoal + 1
                        val awayDefensiveMidfielderShootGoal = it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderShootGoalUpdated =
                            awayDefensiveMidfielderShootGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayShootGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderShootGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "shoot_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValleyGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayValleyGoal = currentValleyGoal + 1
                        val awayDefensiveMidfielderValleyGoal =
                            it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderValleyGoalUpdated =
                            awayDefensiveMidfielderValleyGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayValleyGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderValleyGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "valley_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealedGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayHealedGoal = currentHealedGoal + 1
                        val awayDefensiveMidfielderHealedGoal =
                            it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderHealedGoalUpdated =
                            awayDefensiveMidfielderHealedGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayHealedGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderHealedGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "healed_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentFoulGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayFoulGoal = currentFoulGoal + 1
                        val awayDefensiveMidfielderFoulGoal = it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderFoulGoalUpdated =
                            awayDefensiveMidfielderFoulGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayFoulGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderFoulGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "foul_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentScissorsGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayScissorsGoal = currentScissorsGoal + 1
                        val awayDefensiveMidfielderScissorsGoal =
                            it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderScissorsGoalUpdated =
                            awayDefensiveMidfielderScissorsGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayScissorsGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal",
                                awayDefensiveMidfielderScissorsGoalUpdated
                            )
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }


                        val action = "scissors_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentOtherGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayOtherGoal = currentOtherGoal + 1
                        val awayDefensiveMidfielderOtherGoal = it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderOtherGoalUpdated =
                            awayDefensiveMidfielderOtherGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayOtherGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderOtherGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "other_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }


                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentReverseGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayReverseGoal = currentReverseGoal + 1
                        val awayDefensiveMidfielderReverseGoal =
                            it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderReverseGoalUpdated =
                            awayDefensiveMidfielderReverseGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayReverseGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderReverseGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "reverse_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }
                    }
            }

            //handlerLobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLobGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayLobGoal = currentLobGoal + 1
                        val awayDefensiveMidfielderLobGoal = it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderLobGoalUpdated =
                            awayDefensiveMidfielderLobGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayLobGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderLobGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "lob_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentLongGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayLongGoal = currentLongGoal + 1
                        val awayDefensiveMidfielderLongGoal = it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderLongGoalUpdated =
                            awayDefensiveMidfielderLongGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayLongGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderLongGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "long_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentHealGoal = it.getLong("${teamName}_goal") ?: 0
                        val awayHealGoal = currentHealGoal + 1
                        val awayDefensiveMidfielderHealGoal = it.getLong("${playerName}_goal") ?: 0
                        val awayDefensiveMidfielderHealGoalUpdated =
                            awayDefensiveMidfielderHealGoal + 1
                        db.collection(collection).document(documentId)
                            .update("${teamName}_goal", awayHealGoal)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }
                        db.collection(collection).document(documentId)
                            .update("${playerName}_goal", awayDefensiveMidfielderHealGoalUpdated)
                            .addOnSuccessListener {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error updating document", e)
                            }

                        val action = "heal_goal"
                        val goalData = hashMapOf(
                            "time" to time,
                            "player" to playerName,
                            "action" to action,
                        )
                        db.collection(collection).document(documentId)
                            .collection(collectionBranch).add(goalData)
                            .addOnSuccessListener { documentReference ->
                                Log.d(
                                    "Success",
                                    "DocumentSnapshot added with ID: ${documentReference.id}"
                                )
                                alertDialog.dismiss()
                            }.addOnFailureListener() { e ->
                                Log.w("Error", "Error adding document", e)
                            }

                        //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                        db.collection(collection).document(documentId)
                            .update(
                                "${playerName}_goal_times", FieldValue.arrayUnion(time)
                            ).addOnSuccessListener() {
                                Log.d("Success", "DocumentSnapshot successfully updated!")
                                alertDialog.dismiss()
                            }.addOnFailureListener() {
                                Log.w("Error", "Error updating document", it)
                            }

                    }
            }
        }
    }

    private fun getAwayTeamCentralMidfielder(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Central Midfielder")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayCentralMidfielder = document.getString("nama_pemain").toString()
                    Log.d("Away Central Midfielder: ", teamAwayCentralMidfielder)

                    tvAwayCentralMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player6_name_away)
                    tvAwayCentralMidfielderName.text = teamAwayCentralMidfielder

                    val constraintPlayer =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_central_midfielder)
                    constraintPlayer.setOnClickListener() {
                        showAwayCentralMidfielder()
                    }

                    val awayCentralMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player6_name_away)
                    val documentId = documentId
                    val teamAwayDocumentId = teamAwayDocId
                    val role = "Central Midfielder"
                    db.collection("matchStats").document(documentId)
                        .update(
                            "${tvTeamAway.text}_central_midfielder",
                            awayCentralMidfielderName.text.toString()
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val nomorPunggung = it.documents[0].getString("no_punggung")
                            val tvNomorPunggung =
                                findViewById<TextView>(R.id.tv_goal_player6_number_away)
                            tvNomorPunggung.text = nomorPunggung
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun showAwayCentralMidfielder() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val namaPemain = tvAwayCentralMidfielderName.text
        tvTendanganGoal.text = "Aksi Pemain: $namaPemain"

        //inisialisasi variabel lumayan penting
        val documentId = documentId
        val collection = "matchStats"
        val tvTimer = findViewById<TextView>(R.id.timerTextView)
        val time = tvTimer.text.toString()
        val namaTeam = tvTeamAway.text

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${tvTeamAway.text}_shoot_fail") ?: 0
                    val awayShootFail = currentShootFail + 1
                    val awayCentralMidfielderShootFail =
                        it.getLong("${tvAwayCentralMidfielderName.text}_shoot_fail") ?: 0
                    val awayCentralMidfielderShootFailUpdated = awayCentralMidfielderShootFail + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_shoot_fail", awayShootFail)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_shoot_fail",
                            awayCentralMidfielderShootFailUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }

                    val action = "shoot_fail"
                    val goalData = hashMapOf(
                        "time" to time,
                        "player" to tvAwayCentralMidfielderName.text.toString(),
                        "action" to action,
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(goalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }

                    //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_shoot_fail_times",
                            FieldValue.arrayUnion(time)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${tvTeamAway.text}_assist") ?: 0
                    val awayAssist = currentAssist + 1
                    val awayCentralMidfielderAssist =
                        it.getLong("${tvAwayCentralMidfielderName.text}_assist") ?: 0
                    val awayCentralMidfielderAssistUpdated = awayCentralMidfielderAssist + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_assist", awayAssist)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_assist",
                            awayCentralMidfielderAssistUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val action = "assist"
                    val goalData = hashMapOf(
                        "time" to time,
                        "player" to tvAwayCentralMidfielderName.text.toString(),
                        "action" to action,
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(goalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }
                    //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_assist_times",
                            FieldValue.arrayUnion(time)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler 10mGoal
        val btn10mGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btn10mGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mGoal = it.getLong("${tvTeamAway.text}_10m_goal") ?: 0
                    val away10mGoal = current10mGoal + 1
                    val awayCentralMidfielder10mGoal =
                        it.getLong("${tvAwayCentralMidfielderName.text}_10m_goal") ?: 0
                    val awayCentralMidfielder10mGoalUpdated = awayCentralMidfielder10mGoal + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_10m_goal", away10mGoal)
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_10m_goal",
                            awayCentralMidfielder10mGoalUpdated
                        )
                        .addOnSuccessListener {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error updating document", e)
                        }
                    val action = "10m_goal"
                    val goalData = hashMapOf(
                        "time" to time,
                        "player" to tvAwayCentralMidfielderName.text.toString(),
                        "action" to action,
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch).add(goalData)
                        .addOnSuccessListener { documentReference ->
                            Log.d(
                                "Success",
                                "DocumentSnapshot added with ID: ${documentReference.id}"
                            )
                            alertDialog.dismiss()
                        }.addOnFailureListener() { e ->
                            Log.w("Error", "Error adding document", e)
                        }
                    //masukkan data time ke dalam field ${playerName}_goal_times dalam bentuk Array
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_10m_goal_times",
                            FieldValue.arrayUnion(time)
                        ).addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                            alertDialog.dismiss()
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentYellowCard = it.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val awayYellowCard = currentYellowCard + 1
                    val currentPlayerYellowCard =
                        it.getLong("${tvAwayCentralMidfielderName.text}_yellow_card") ?: 0
                    val playerYellowCard = currentPlayerYellowCard + 1
                    db.collection(collection).document(documentId)
                        .update("${tvTeamAway.text}_yellow_card", awayYellowCard)
                        .addOnSuccessListener() {
                            Log.d("Success", "Added Yellow Card Data For ${tvTeamAway.text}")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() {
                            Log.d("Failed", "Failed To Add Yellow Card Data For ${tvTeamAway.text}")
                        }
                    db.collection(collection).document(documentId)
                        .update("${tvAwayCentralMidfielderName.text}_yellow_card", playerYellowCard)
                        .addOnSuccessListener() {
                            Log.d(
                                "Success",
                                "Added Yellow Card Data For ${tvAwayCentralMidfielderName.text}"
                            )
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() {
                            Log.d(
                                "Failed",
                                "Failed To Add Yellow Card Data For ${tvAwayCentralMidfielderName.text}"
                            )
                        }

                    val action = "yellow_card"
                    val yellowCardData = hashMapOf(
                        "action" to action,
                        "player" to "$tvAwayCentralMidfielderName.text",
                        "time" to time
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(yellowCardData)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Update Data")
                        }
                        .addOnFailureListener() {
                            Log.d("Failure", "Failure Update Data")
                        }

                    db.collection(collection).document(documentId)
                        .update(
                            "${tvAwayCentralMidfielderName.text}_yellow_card_times",
                            FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Succes", "Success Add Yellow Card Times")
                        }
                        .addOnFailureListener() {
                            Log.d("Failure", "Failure Add Yellow Card Data")
                        }
                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentPenalty = it.getLong("${tvTeamAway.text}_penalty") ?: 0
                    val awayPenalty = currentPenalty + 1
                    val playerPenalty =
                        it.getLong("${tvAwayCentralMidfielderName.text}_penalty") ?: 0
                    val playerPenaltyCount = playerPenalty + 1
                    val action = "penalty"
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvTeamAway.text}_penalty",
                            awayPenalty,
                            "${tvAwayCentralMidfielderName.text}_penalty",
                            playerPenaltyCount,
                            "${tvAwayCentralMidfielderName.text}_penalty_times",
                            FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() {
                            alertDialog.dismiss()
                            Log.w("Failed", "Failed To Add Penalty Data")
                        }

                    val penaltyData = hashMapOf(
                        "time" to time,
                        "player" to "${tvAwayCentralMidfielderName.text}",
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(penaltyData)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Penalty Data")
                        }
                        .addOnFailureListener() {
                            Log.d("Failure", "Failure Add Penalty Data")
                        }

                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            val offsideData = hashMapOf(
                "time" to time,
                "player" to "${tvAwayCentralMidfielderName}",
                "action" to "offside"
            )
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val teamOffside = it.getLong("${tvTeamAway.text}_offside") ?: 0
                    val currentOffside = teamOffside + 1
                    val playerOffside =
                        it.getLong("${tvAwayCentralMidfielderName.text}_offside") ?: 0
                    val playerOffsideCount = playerOffside + 1
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvTeamAway.text}_offside",
                            currentOffside,
                            "${tvAwayCentralMidfielderName.text}_offside",
                            playerOffsideCount,
                            "${tvAwayCentralMidfielderName.text}_offside_times",
                            FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Offside Data")
                            alertDialog.dismiss()
                        }
                        .addOnFailureListener() {
                            Log.d("Success", "Success Add Offside Data")
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(offsideData)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Offside Data")
                        }
                        .addOnFailureListener() {
                            Log.d("Failure", "Failure Add Offside Data")
                        }

                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            val stealData = hashMapOf(
                "time" to time,
                "player" to "${tvAwayCentralMidfielderName.text}",
                "action" to "steal"
            )
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentSteal = it.getLong("${tvTeamAway.text}_steal") ?: 0
                    val teamSteal = currentSteal + 1
                    val currentPlayerSteal =
                        it.getLong("${tvAwayCentralMidfielderName.text}_steal") ?: 0
                    val playerSteal = currentPlayerSteal + 1
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvTeamAway.text}_steal", teamSteal,
                            "${tvAwayCentralMidfielderName.text}_steal", playerSteal,
                            "${tvAwayCentralMidfielderName.text}_steal", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            db.collection(collection).document(documentId)
                                .collection(collectionBranch)
                                .add(stealData)
                            Log.d("Success", "Success Add Steal Data")
                            alertDialog.dismiss()
                        }
                }
        }

        //handler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_Card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentRedCard = it.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val awayRedCard = currentRedCard + 1
                    val currentPlayerRedCard =
                        it.getLong("${tvAwayCentralMidfielderName.text}_red_card") ?: 0
                    val playerRedCard = currentPlayerRedCard + 1
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvTeamAway.text}_red_card",
                            awayRedCard,
                            "${tvAwayCentralMidfielderName.text}_red_card",
                            playerRedCard,
                            "${tvAwayCentralMidfielderName.text}_red_card_times",
                            FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            alertDialog.dismiss()
                            Log.d("Success", "Success Add Red Card Data")
                        }
                    val action = "red_card"
                    val redCardData = hashMapOf(
                        "time" to time,
                        "player" to "${tvAwayCentralMidfielderName.text}",
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(redCardData)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Red Card Data")
                        }
                }
        }

        //handler 10mFail
        val btnTenMeterFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btnTenMeterFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val current10mFail = it.getLong("${tvTeamAway.text}_10m_fail") ?: 0
                    val team10mFail = current10mFail + 1
                    val curplay10mfail =
                        it.getLong("${tvAwayCentralMidfielderName.text}_10m_fail") ?: 0
                    val player10mFail = curplay10mfail + 1
                    db.collection(collection).document(documentId)
                        .update(
                            "${tvTeamAway.text}_10m_fail",
                            team10mFail,
                            "${tvAwayCentralMidfielderName.text}_10m_fail",
                            player10mFail,
                            "${tvAwayCentralMidfielderName.text}_10m_fail_times",
                            FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {

                            val tenMeterFailData = hashMapOf(
                                "time" to time,
                                "player" to "${tvAwayCentralMidfielderName.text}",
                                "action" to "10m_fail"
                            )
                            db.collection(collection).document(documentId)
                                .collection(collectionBranch)
                                .add(tenMeterFailData)
                            Log.d("Success", "Success Add 10M Fail")
                            alertDialog.dismiss()
                        }
                }
        }

        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()
            val goalBranch = "goals"

            val time = tvTimer.text

            //handler shoot_goal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentGoal + 1
                        val currentPlayerGoal = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayerGoal + 1
                        val action = "shoot_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Shoot Goal Data")
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "valley_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "healed_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "foul_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "scissors_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "heal_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "other_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "reverse_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "lob_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "long_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }
        }

    }

    private fun getAwayTeamAttackingMidfielder(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Attacking Midfielder")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayAttackingMidfielder = document.getString("nama_pemain").toString()
                    Log.d("Away Attacking Midfielder: ", teamAwayAttackingMidfielder)

                    tvAwayAttackingMidfielderName =
                        findViewById<TextView>(R.id.tv_goal_player7_name_away)
                    tvAwayAttackingMidfielderName.text = teamAwayAttackingMidfielder

                    val constraintPlayer =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_attacking_midfielde)
                    constraintPlayer.setOnClickListener() {
                        AttackingMidfielderAwayDialog()
                    }

                    val name = tvAwayAttackingMidfielderName.text
                    val documentId = documentId
                    val teamAwayDocumentId = teamAwayDocId
                    val role = "Attacking Midfielder"
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_attacking_midfielder", name)
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val nomorPunggung = it.documents[0].getString("no_punggung")
                            val tvNomorPunggung =
                                findViewById<TextView>(R.id.tv_goal_player7_number_away)
                            tvNomorPunggung.text = nomorPunggung
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun AttackingMidfielderAwayDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val namaPemain = tvAwayAttackingMidfielderName.text
        tvTendanganGoal.text = "Aksi Pemain: $namaPemain"

        //inisialisasi variabel lumayan penting
        val documentId = documentId
        val collection = "matchStats"
        val tvTimer = findViewById<TextView>(R.id.timerTextView)
        val time = tvTimer.text.toString()
        val namaTeam = tvTeamAway.text

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${namaTeam}_shoot_fail") ?: 0
                    val teamShootFail = currentShootFail + 1
                    val currentPlayerShootFail = it.getLong("${namaPemain}_shoot_fail") ?: 0
                    val playerShootFail = currentPlayerShootFail + 1
                    val action = "shoot_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_shoot_fail", teamShootFail,
                            "${namaPemain}_shoot_fail", playerShootFail,
                            "${namaPemain}_shoot_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_assist") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_assist") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "assist"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_assist", teamAssist,
                            "${namaPemain}_assist", playerAssist,
                            "${namaPemain}_assist_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mGoal
        val btnTenMeterGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btnTenMeterGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_goal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_goal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_goal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_goal", teamAssist,
                            "${namaPemain}_10m_goal", playerAssist,
                            "${namaPemain}_10m_goal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_yellow_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_yellow_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "yellow_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_yellow_card", teamAssist,
                            "${namaPemain}_yellow_card", playerAssist,
                            "${namaPemain}_yellow_card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_penalty") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_penalty") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "penalty"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_penalty", teamAssist,
                            "${namaPemain}_penalty", playerAssist,
                            "${namaPemain}_penalty_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_offside") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_offside") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "offside"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_offside", teamAssist,
                            "${namaPemain}_offside", playerAssist,
                            "${namaPemain}_offside_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_steal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_steal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "steal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_steal", teamAssist,
                            "${namaPemain}_steal", playerAssist,
                            "${namaPemain}_steal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //hanldler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_red_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_red_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "red_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_red_card", teamAssist,
                            "${namaPemain}_red_card", playerAssist,
                            "${namaPemain}_red_Card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mFail
        val btnTenMeterFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btnTenMeterFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_fail") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_fail") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_fail", teamAssist,
                            "${namaPemain}_10m_fail", playerAssist,
                            "${namaPemain}_10m_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler toogleShoot
        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()
            val goalBranch = "goals"

            val time = tvTimer.text

            //handler shoot_goal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentGoal + 1
                        val currentPlayerGoal = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayerGoal + 1
                        val action = "shoot_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Shoot Goal Data")
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "valley_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "healed_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "foul_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "scissors_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "heal_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "other_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "reverse_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "lob_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "long_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }
        }
    }

    private fun getAwayTeamLeftWinger(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Left Winger")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayLeftWinger = document.getString("nama_pemain").toString()
                    Log.d("Away Left Winger: ", teamAwayLeftWinger)

                    tvAwayLeftWingerName = findViewById<TextView>(R.id.tv_goal_player8_name_away)
                    tvAwayLeftWingerName.text = teamAwayLeftWinger

                    val constraintPlayer =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_attacking_left_winger)
                    constraintPlayer.setOnClickListener() {
                        LeftWingerAwayDialog()
                    }

                    val name = tvAwayLeftWingerName.text
                    val documentId = documentId
                    val teamAwayDocumentId = teamAwayDocId
                    val role = "Left Winger"
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_left_winger", name)
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val nomorPunggung = it.documents[0].getString("no_punggung")
                            val tvNomorPunggung =
                                findViewById<TextView>(R.id.tv_goal_player8_number_away)
                            tvNomorPunggung.text = nomorPunggung
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun LeftWingerAwayDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val namaPemain = tvAwayLeftWingerName.text
        tvTendanganGoal.text = "Aksi Pemain: $namaPemain"

        //inisialisasi variabel lumayan penting
        val documentId = documentId
        val collection = "matchStats"
        val tvTimer = findViewById<TextView>(R.id.timerTextView)
        val time = tvTimer.text.toString()
        val namaTeam = tvTeamAway.text

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${namaTeam}_shoot_fail") ?: 0
                    val teamShootFail = currentShootFail + 1
                    val currentPlayerShootFail = it.getLong("${namaPemain}_shoot_fail") ?: 0
                    val playerShootFail = currentPlayerShootFail + 1
                    val action = "shoot_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_shoot_fail", teamShootFail,
                            "${namaPemain}_shoot_fail", playerShootFail,
                            "${namaPemain}_shoot_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_assist") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_assist") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "assist"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_assist", teamAssist,
                            "${namaPemain}_assist", playerAssist,
                            "${namaPemain}_assist_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mGoal
        val btnTenMeterGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btnTenMeterGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_goal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_goal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_goal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_goal", teamAssist,
                            "${namaPemain}_10m_goal", playerAssist,
                            "${namaPemain}_10m_goal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_yellow_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_yellow_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "yellow_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_yellow_card", teamAssist,
                            "${namaPemain}_yellow_card", playerAssist,
                            "${namaPemain}_yellow_card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_penalty") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_penalty") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "penalty"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_penalty", teamAssist,
                            "${namaPemain}_penalty", playerAssist,
                            "${namaPemain}_penalty_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_offside") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_offside") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "offside"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_offside", teamAssist,
                            "${namaPemain}_offside", playerAssist,
                            "${namaPemain}_offside_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_steal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_steal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "steal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_steal", teamAssist,
                            "${namaPemain}_steal", playerAssist,
                            "${namaPemain}_steal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //hanldler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_red_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_red_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "red_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_red_card", teamAssist,
                            "${namaPemain}_red_card", playerAssist,
                            "${namaPemain}_red_Card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mFail
        val btnTenMeterFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btnTenMeterFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_fail") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_fail") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_fail", teamAssist,
                            "${namaPemain}_10m_fail", playerAssist,
                            "${namaPemain}_10m_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler toogleShoot
        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()
            val goalBranch = "goals"

            val time = tvTimer.text

            //handler shoot_goal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentGoal + 1
                        val currentPlayerGoal = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayerGoal + 1
                        val action = "shoot_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Shoot Goal Data")
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "valley_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "healed_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "foul_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "scissors_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "heal_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "other_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "reverse_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "lob_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "long_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }
        }
    }


    private fun getAwayTeamRightWinger(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Right Winger")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayRightWinger = document.getString("nama_pemain").toString()
                    Log.d("Away Right Winger: ", teamAwayRightWinger)

                    tvAwayRightWingerName = findViewById<TextView>(R.id.tv_goal_player9_name_away)
                    tvAwayRightWingerName.text = teamAwayRightWinger

                    val constraintPlayer =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_attacking_right_winger)
                    constraintPlayer.setOnClickListener() {
                        RightWingerAwayDialog()
                    }

                    val name = tvAwayRightWingerName.text
                    val documentId = documentId
                    val teamAwayDocumentId = teamAwayDocId
                    val role = "Right Winger"
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_right_winger", name)
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val nomorPunggung = it.documents[0].getString("no_punggung")
                            val tvNomorPunggung =
                                findViewById<TextView>(R.id.tv_goal_player9_number_away)
                            tvNomorPunggung.text = nomorPunggung
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun RightWingerAwayDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val namaPemain = tvAwayRightWingerName.text
        tvTendanganGoal.text = "Aksi Pemain: $namaPemain"

        //inisialisasi variabel lumayan penting
        val documentId = documentId
        val collection = "matchStats"
        val tvTimer = findViewById<TextView>(R.id.timerTextView)
        val time = tvTimer.text.toString()
        val namaTeam = tvTeamAway.text

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${namaTeam}_shoot_fail") ?: 0
                    val teamShootFail = currentShootFail + 1
                    val currentPlayerShootFail = it.getLong("${namaPemain}_shoot_fail") ?: 0
                    val playerShootFail = currentPlayerShootFail + 1
                    val action = "shoot_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_shoot_fail", teamShootFail,
                            "${namaPemain}_shoot_fail", playerShootFail,
                            "${namaPemain}_shoot_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_assist") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_assist") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "assist"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_assist", teamAssist,
                            "${namaPemain}_assist", playerAssist,
                            "${namaPemain}_assist_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mGoal
        val btnTenMeterGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btnTenMeterGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_goal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_goal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_goal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_goal", teamAssist,
                            "${namaPemain}_10m_goal", playerAssist,
                            "${namaPemain}_10m_goal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_yellow_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_yellow_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "yellow_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_yellow_card", teamAssist,
                            "${namaPemain}_yellow_card", playerAssist,
                            "${namaPemain}_yellow_card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_penalty") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_penalty") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "penalty"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_penalty", teamAssist,
                            "${namaPemain}_penalty", playerAssist,
                            "${namaPemain}_penalty_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_offside") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_offside") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "offside"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_offside", teamAssist,
                            "${namaPemain}_offside", playerAssist,
                            "${namaPemain}_offside_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_steal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_steal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "steal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_steal", teamAssist,
                            "${namaPemain}_steal", playerAssist,
                            "${namaPemain}_steal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //hanldler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_red_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_red_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "red_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_red_card", teamAssist,
                            "${namaPemain}_red_card", playerAssist,
                            "${namaPemain}_red_Card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mFail
        val btnTenMeterFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btnTenMeterFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_fail") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_fail") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_fail", teamAssist,
                            "${namaPemain}_10m_fail", playerAssist,
                            "${namaPemain}_10m_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler toogleShoot
        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()
            val goalBranch = "goals"

            val time = tvTimer.text

            //handler shoot_goal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentGoal + 1
                        val currentPlayerGoal = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayerGoal + 1
                        val action = "shoot_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Shoot Goal Data")
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "valley_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "healed_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "foul_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "scissors_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "heal_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "other_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "reverse_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "lob_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "long_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }
        }
    }


    private fun getAwayTeamCentreForward(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Centre Forward")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwayCentreForward = document.getString("nama_pemain").toString()
                    Log.d("Away Centre Forward: ", teamAwayCentreForward)

                    tvAwayCentreForwardName = findViewById<TextView>(R.id.tv_goal_player10_name_away)
                    tvAwayCentreForwardName.text = teamAwayCentreForward

                    val constraintPlayer = findViewById<ConstraintLayout>(R.id.gk_constraint_away_attacking_centre_forward)
                    constraintPlayer.setOnClickListener() {
                        CentreForwardAwayDialog()
                    }

                    val name = tvAwayCentreForwardName.text
                    val changePlayerButton = findViewById<ConstraintLayout>(R.id.constraint_change_home)
                    changePlayerButton.setOnClickListener(){
                        changePlayer(name.toString())
                    }
                    val documentId = documentId
                    val teamAwayDocumentId = teamAwayDocId
                    val role = "Centre Forward"
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_centre_forward", name)
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val nomorPunggung = it.documents[0].getString("no_punggung")
                            val tvNomorPunggung =
                                findViewById<TextView>(R.id.tv_goal_player10_number_away)
                            tvNomorPunggung.text = nomorPunggung
                        }
                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun changePlayer(name: String?) {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
//        val dialogView = inflater.inflate(R.layout.dia)
    }

    private fun CentreForwardAwayDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val namaPemain = tvAwayCentreForwardName.text
        tvTendanganGoal.text = "Aksi Pemain: $namaPemain"

        //inisialisasi variabel lumayan penting
        val documentId = documentId
        val collection = "matchStats"
        val tvTimer = findViewById<TextView>(R.id.timerTextView)
        val time = tvTimer.text.toString()
        val namaTeam = tvTeamAway.text

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${namaTeam}_shoot_fail") ?: 0
                    val teamShootFail = currentShootFail + 1
                    val currentPlayerShootFail = it.getLong("${namaPemain}_shoot_fail") ?: 0
                    val playerShootFail = currentPlayerShootFail + 1
                    val action = "shoot_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_shoot_fail", teamShootFail,
                            "${namaPemain}_shoot_fail", playerShootFail,
                            "${namaPemain}_shoot_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_assist") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_assist") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "assist"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_assist", teamAssist,
                            "${namaPemain}_assist", playerAssist,
                            "${namaPemain}_assist_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mGoal
        val btnTenMeterGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btnTenMeterGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_goal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_goal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_goal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_goal", teamAssist,
                            "${namaPemain}_10m_goal", playerAssist,
                            "${namaPemain}_10m_goal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_yellow_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_yellow_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "yellow_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_yellow_card", teamAssist,
                            "${namaPemain}_yellow_card", playerAssist,
                            "${namaPemain}_yellow_card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_penalty") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_penalty") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "penalty"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_penalty", teamAssist,
                            "${namaPemain}_penalty", playerAssist,
                            "${namaPemain}_penalty_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_offside") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_offside") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "offside"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_offside", teamAssist,
                            "${namaPemain}_offside", playerAssist,
                            "${namaPemain}_offside_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_steal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_steal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "steal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_steal", teamAssist,
                            "${namaPemain}_steal", playerAssist,
                            "${namaPemain}_steal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //hanldler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_red_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_red_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "red_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_red_card", teamAssist,
                            "${namaPemain}_red_card", playerAssist,
                            "${namaPemain}_red_Card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mFail
        val btnTenMeterFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btnTenMeterFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_fail") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_fail") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_fail", teamAssist,
                            "${namaPemain}_10m_fail", playerAssist,
                            "${namaPemain}_10m_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler toogleShoot
        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()
            val goalBranch = "goals"

            val time = tvTimer.text

            //handler shoot_goal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentGoal + 1
                        val currentPlayerGoal = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayerGoal + 1
                        val action = "shoot_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Shoot Goal Data")
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "valley_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "healed_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "foul_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "scissors_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "heal_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "other_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "reverse_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "lob_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "long_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }
        }
    }


    private fun getAwayTeamSecondStriker(teamAwayDocId: String) {
        db.collection("pemain")
            .whereEqualTo("id_tim_pemain", teamAwayDocId)
            .whereEqualTo("role_pemain", "Second Striker")
            .whereEqualTo("status_pemain", "Pemain Aktif")
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    teamAwaySecondStriker = document.getString("nama_pemain").toString()
                    Log.d("Away Second Striker: ", teamAwaySecondStriker)

                    tvAwaySecondStrikerName =
                        findViewById<TextView>(R.id.tv_goal_player11_name_away)
                    tvAwaySecondStrikerName.text = teamAwaySecondStriker

                    val constraintPlayer =
                        findViewById<ConstraintLayout>(R.id.gk_constraint_away_attacking_second_striker)
                    constraintPlayer.setOnClickListener() {
                        SecondStrikerDialog()
                    }

                    val name = tvAwaySecondStrikerName.text
                    val documentId = documentId
                    val teamAwayDocumentId = teamAwayDocId
                    val role = "Second Striker"
                    db.collection("matchStats").document(documentId)
                        .update("${tvTeamAway.text}_second_striker", name)
                        .addOnSuccessListener() {
                            Log.d("Success", "DocumentSnapshot successfully updated!")
                        }.addOnFailureListener() {
                            Log.w("Error", "Error updating document", it)
                        }
                    db.collection("pemain")
                        .whereEqualTo("id_tim_pemain", teamAwayDocumentId)
                        .whereEqualTo("role_pemain", role)
                        .whereEqualTo("status_pemain", "Pemain Aktif")
                        .get()
                        .addOnSuccessListener() {
                            val nomorPunggung = it.documents[0].getString("no_punggung")
                            val tvNomorPunggung =
                                findViewById<TextView>(R.id.tv_goal_player11_number_away)
                            tvNomorPunggung.text = nomorPunggung
                        }

                }
            }
            .addOnFailureListener { exception ->
                Log.w("Error", "Error getting documents: ", exception)
            }
    }

    private fun SecondStrikerDialog() {
        val dialogBuilder = AlertDialog.Builder(this)
        val inflater = this.layoutInflater
        val dialogView = inflater.inflate(R.layout.dialog_match_aksi_landscape, null)
        dialogBuilder.setView(dialogView)
        val alertDialog = dialogBuilder.create()
        alertDialog.show()

        //inisialisasi nama pemain
        val tvTendanganGoal = dialogView.findViewById<TextView>(R.id.tv_tendangan_goal)
        val namaPemain = tvAwaySecondStrikerName.text
        tvTendanganGoal.text = "Aksi Pemain: $namaPemain"

        //inisialisasi variabel lumayan penting
        val documentId = documentId
        val collection = "matchStats"
        val tvTimer = findViewById<TextView>(R.id.timerTextView)
        val time = tvTimer.text.toString()
        val namaTeam = tvTeamAway.text

        //handler shootFail
        val btnShootFail = dialogView.findViewById<TextView>(R.id.button_shootFail)
        btnShootFail.setOnClickListener() {
            val collectionBranch = "shoot_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentShootFail = it.getLong("${namaTeam}_shoot_fail") ?: 0
                    val teamShootFail = currentShootFail + 1
                    val currentPlayerShootFail = it.getLong("${namaPemain}_shoot_fail") ?: 0
                    val playerShootFail = currentPlayerShootFail + 1
                    val action = "shoot_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_shoot_fail", teamShootFail,
                            "${namaPemain}_shoot_fail", playerShootFail,
                            "${namaPemain}_shoot_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler assist
        val btnAssist = dialogView.findViewById<TextView>(R.id.button_assist)
        btnAssist.setOnClickListener() {
            val collectionBranch = "assist"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_assist") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_assist") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "assist"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_assist", teamAssist,
                            "${namaPemain}_assist", playerAssist,
                            "${namaPemain}_assist_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mGoal
        val btnTenMeterGoal = dialogView.findViewById<TextView>(R.id.button_10mGoal)
        btnTenMeterGoal.setOnClickListener() {
            val collectionBranch = "10m_goal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_goal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_goal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_goal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_goal", teamAssist,
                            "${namaPemain}_10m_goal", playerAssist,
                            "${namaPemain}_10m_goal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler yellowCard
        val btnYellowCard = dialogView.findViewById<TextView>(R.id.button_yellowCard)
        btnYellowCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_yellow_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_yellow_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "yellow_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_yellow_card", teamAssist,
                            "${namaPemain}_yellow_card", playerAssist,
                            "${namaPemain}_yellow_card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler penalty
        val btnPenalty = dialogView.findViewById<TextView>(R.id.button_penalty)
        btnPenalty.setOnClickListener() {
            val collectionBranch = "penalty"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_penalty") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_penalty") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "penalty"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_penalty", teamAssist,
                            "${namaPemain}_penalty", playerAssist,
                            "${namaPemain}_penalty_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler offside
        val btnOffside = dialogView.findViewById<TextView>(R.id.button_offside)
        btnOffside.setOnClickListener() {
            val collectionBranch = "offside"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_offside") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_offside") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "offside"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_offside", teamAssist,
                            "${namaPemain}_offside", playerAssist,
                            "${namaPemain}_offside_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler steal
        val btnSteal = dialogView.findViewById<TextView>(R.id.button_steal)
        btnSteal.setOnClickListener() {
            val collectionBranch = "steal"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_steal") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_steal") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "steal"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_steal", teamAssist,
                            "${namaPemain}_steal", playerAssist,
                            "${namaPemain}_steal_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //hanldler redCard
        val btnRedCard = dialogView.findViewById<TextView>(R.id.button_redCard)
        btnRedCard.setOnClickListener() {
            val collectionBranch = "violations_card"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_red_card") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_red_card") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "red_card"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_red_card", teamAssist,
                            "${namaPemain}_red_card", playerAssist,
                            "${namaPemain}_red_Card_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler 10mFail
        val btnTenMeterFail = dialogView.findViewById<TextView>(R.id.button_10mfail)
        btnTenMeterFail.setOnClickListener() {
            val collectionBranch = "10m_fail"
            db.collection(collection).document(documentId)
                .get()
                .addOnSuccessListener() {
                    val currentAssist = it.getLong("${namaTeam}_10m_fail") ?: 0
                    val teamAssist = currentAssist + 1
                    val playerAssistCount = it.getLong("${namaPemain}_10m_fail") ?: 0
                    val playerAssist = playerAssistCount + 1
                    val action = "10m_fail"
                    val data = hashMapOf(
                        "time" to time,
                        "player" to namaPemain,
                        "action" to action
                    )
                    db.collection(collection).document(documentId)
                        .update(
                            "${namaTeam}_10m_fail", teamAssist,
                            "${namaPemain}_10m_fail", playerAssist,
                            "${namaPemain}_10m_fail_times", FieldValue.arrayUnion(time)
                        )
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                            alertDialog.dismiss()
                        }
                    db.collection(collection).document(documentId)
                        .collection(collectionBranch)
                        .add(data)
                        .addOnSuccessListener() {
                            Log.d("Success", "Success Add Goal Data")
                        }
                }
        }

        //handler toogleShoot
        val toogleShoot = dialogView.findViewById<TextView>(R.id.button_shootGoal)
        toogleShoot.setOnClickListener() {
            val dialogBuilder = AlertDialog.Builder(this)
            val inflater = this.layoutInflater
            val dialogView = inflater.inflate(R.layout.dialog_match_goal, null)
            dialogBuilder.setView(dialogView)
            val alertDialog = dialogBuilder.create()
            alertDialog.show()
            val goalBranch = "goals"

            val time = tvTimer.text

            //handler shoot_goal
            val btnShootGoal = dialogView.findViewById<TextView>(R.id.button_goal_shoot)
            btnShootGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentGoal = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentGoal + 1
                        val currentPlayerGoal = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayerGoal + 1
                        val action = "shoot_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Shoot Goal Data")
                            }
                    }
            }

            //handler valleyGoal
            val btnValleyGoal = dialogView.findViewById<TextView>(R.id.button_goal_valley)
            btnValleyGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "valley_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healedGoal
            val btnHealedGoal = dialogView.findViewById<TextView>(R.id.button_goal_healed)
            btnHealedGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "healed_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler foulGoal
            val btnFoulGoal = dialogView.findViewById<TextView>(R.id.button_goal_foul)
            btnFoulGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "foul_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler scissorsGoal
            val btnScissorsGoal = dialogView.findViewById<TextView>(R.id.button_goal_Scissors)
            btnScissorsGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "scissors_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler healGoal
            val btnHealGoal = dialogView.findViewById<TextView>(R.id.button_goal_Heal)
            btnHealGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "heal_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler otherGoal
            val btnOtherGoal = dialogView.findViewById<TextView>(R.id.button_goal_other)
            btnOtherGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "other_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler reverseGoal
            val btnReverseGoal = dialogView.findViewById<TextView>(R.id.button_goal_reverse)
            btnReverseGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "reverse_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler lobGoal
            val btnLobGoal = dialogView.findViewById<TextView>(R.id.button_goal_lob)
            btnLobGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "lob_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }

            //handler longGoal
            val btnLongGoal = dialogView.findViewById<TextView>(R.id.button_goal_long)
            btnLongGoal.setOnClickListener() {
                db.collection(collection).document(documentId)
                    .get()
                    .addOnSuccessListener() {
                        val currentValley = it.getLong("${namaTeam}_goal") ?: 0
                        val teamGoal = currentValley + 1
                        val currentPlayer = it.getLong("${namaPemain}_goal") ?: 0
                        val playerGoal = currentPlayer + 1
                        val action = "long_goal"
                        val data = hashMapOf(
                            "time" to time,
                            "player" to namaPemain,
                            "action" to action
                        )
                        db.collection(collection).document(documentId)
                            .update(
                                "${namaTeam}_goal", teamGoal,
                                "${namaPemain}_goal", playerGoal,
                                "${namaPemain}_goal_times", FieldValue.arrayUnion(time)
                            )
                        db.collection(collection).document(documentId)
                            .collection(goalBranch)
                            .add(data)
                            .addOnSuccessListener() {
                                alertDialog.dismiss()
                                Log.d("Success", "Success Add Goal Data")
                            }
                    }
            }
        }
    }

    private fun setHomePlayerGoal(){

        //variabel untuk menampilkan data jumlah goal setiap pemain
        val goalKeeperGoalNumber = findViewById<TextView>(R.id.tv_goal_player1_home)
        val centreBackGoalNumber = findViewById<TextView>(R.id.tv_goal_player2_home)
        val leftBackGoalNumber = findViewById<TextView>(R.id.tv_goal_player3_home)
        val rightBackGoalNumber = findViewById<TextView>(R.id.tv_goal_player4_home)
        val defensiveMidfielderGoalNumber = findViewById<TextView>(R.id.tv_goal_player5_home)
        val centralMidfielderGoalNumber = findViewById<TextView>(R.id.tv_goal_player6_home)
        val attackingMidfielderGoalNumber = findViewById<TextView>(R.id.tv_goal_player7_home)
        val leftWingerGoalNumber = findViewById<TextView>(R.id.tv_goal_player8_home)
        val rightWingerGoalNumber = findViewById<TextView>(R.id.tv_goal_player9_home)
        val centreForwardGoalNumber = findViewById<TextView>(R.id.tv_goal_player10_home)
        val secondStrikerGoalNumber = findViewById<TextView>(R.id.tv_goal_player11_home)

        //variabel untuk menyimpan nama pemain
        val goalKeeperNameAway = findViewById<TextView>(R.id.tv_goal_player1_name_away)
        val centreBackNameAway = findViewById<TextView>(R.id.tv_goal_player2_name_away)
        val leftBackNameAway = findViewById<TextView>(R.id.tv_goal_player3_name_away)
        val rightBackNameAway = findViewById<TextView>(R.id.tv_goal_player4_name_away)
        val defensiveMidfielderNameAway = findViewById<TextView>(R.id.tv_goal_player5_name_away)
        val centralMidfielderNameAway = findViewById<TextView>(R.id.tv_goal_player6_name_away)
        val attackingMidfielderNameAway = findViewById<TextView>(R.id.tv_goal_player7_name_away)
        val leftWingerNameAway = findViewById<TextView>(R.id.tv_goal_player8_name_away)
        val rightWingerNameAway = findViewById<TextView>(R.id.tv_goal_player9_name_away)
        val centreForwardNameAway = findViewById<TextView>(R.id.tv_goal_player10_name_away)
        val secondStrikerNameAway = findViewById<TextView>(R.id.tv_goal_player11_name_away)

        //variabel untuk menampilkan data jumlah goal setiap pemain away
        val goalKeeperGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player1_away)
        val centreBackGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player2_away)
        val leftBackGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player3_away)
        val rightBackGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player4_away)
        val defensiveMidfielderGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player5_away)
        val centralMidfielderGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player6_away)
        val attackingMidfielderGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player7_away)
        val leftWingerGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player8_away)
        val rightWingerGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player9_away)
        val centreForwardGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player10_away)
        val secondStrikerGoalNumberAway = findViewById<TextView>(R.id.tv_goal_player11_away)

        //variabel untuk menyimpan nama pemain home
        val goalKeeperName = findViewById<TextView>(R.id.tv_goal_player1_name_home)
        val centreBackName = findViewById<TextView>(R.id.tv_goal_player2_name_home)
        val leftBackName = findViewById<TextView>(R.id.tv_goal_player3_name_home)
        val rightBackName = findViewById<TextView>(R.id.tv_goal_player4_name_home)
        val defensiveMidfielderName = findViewById<TextView>(R.id.tv_goal_player5_name_home)
        val centralMidfielderName = findViewById<TextView>(R.id.tv_goal_player6_name_home)
        val attackingMidfielderName = findViewById<TextView>(R.id.tv_goal_player7_name_home)
        val leftWingerName = findViewById<TextView>(R.id.tv_goal_player8_name_home)
        val rightWingerName = findViewById<TextView>(R.id.tv_goal_player9_name_home)
        val centreForwardName = findViewById<TextView>(R.id.tv_goal_player10_name_home)
        val secondStrikerName = findViewById<TextView>(R.id.tv_goal_player11_name_home)


        val matchDocumentId = intent.getStringExtra("matchId")
        val docRef = db.collection("matchStats").whereEqualTo("match_id", matchDocumentId)
        docRef.addSnapshotListener { snapshot, e ->
            if (e != null) {
                Log.w("Error", "Listen failed.", e)
                return@addSnapshotListener
            }
            if (snapshot != null){
                for (document in snapshot){

                    //handler untuk goalKeeper team home
                    val goalKeeperShootGoal = document.getLong("${goalKeeperName.text}_goal") ?: 0
                    goalKeeperGoalNumber.text = goalKeeperShootGoal.toString()
                    val awayGoalKeeperShootGoal = document.getLong("${goalKeeperNameAway.text}_goal") ?: 0
                    goalKeeperGoalNumberAway.text = awayGoalKeeperShootGoal.toString()

                    //handler untuk centreBack team home
                    val centreBackShootGoal = document.getLong("${centreBackName.text}_goal") ?: 0
                    centreBackGoalNumber.text = centreBackShootGoal.toString()
                    val centreBackShootGoalAway = document.getLong("${centreBackNameAway.text}_goal") ?: 0
                    centreBackGoalNumberAway.text = centreBackShootGoalAway.toString()

                    //handler untuk leftBack team home
                    val leftBackShootGoal = document.getLong("${leftBackName.text}_goal") ?: 0
                    leftBackGoalNumber.text = leftBackShootGoal.toString()
                    val leftBackShootGoalAway = document.getLong("${leftBackNameAway.text}_goal") ?: 0
                    leftBackGoalNumberAway.text = leftBackShootGoalAway.toString()

                    //handler untuk rightBack team home
                    val rightBackShootGoal = document.getLong("${rightBackName.text}_goal") ?: 0
                    rightBackGoalNumber.text = rightBackShootGoal.toString()
                    val rightBackShootGoalAway = document.getLong("${rightBackNameAway.text}_goal") ?: 0
                    rightBackGoalNumberAway.text = rightBackShootGoalAway.toString()

                    //handler untuk defensiveMidfielder team home
                    val defensiveMidfielderShootGoal = document.getLong("${defensiveMidfielderName.text}_goal") ?: 0
                    defensiveMidfielderGoalNumber.text = defensiveMidfielderShootGoal.toString()
                    val defensiveMidfielderShootGoalAway = document.getLong("${defensiveMidfielderNameAway.text}_goal") ?: 0
                    defensiveMidfielderGoalNumberAway.text = defensiveMidfielderShootGoalAway.toString()

                    //handler untuk centralMidfielder team home
                    val centralMidfielderShootGoal = document.getLong("${centralMidfielderName.text}_goal") ?: 0
                    centralMidfielderGoalNumber.text = centralMidfielderShootGoal.toString()
                    val centralMidfielderShootGoalAway = document.getLong("${centralMidfielderNameAway.text}_goal") ?: 0
                    centralMidfielderGoalNumberAway.text = centralMidfielderShootGoalAway.toString()

                    //handler untuk attackingMidfielder team home
                    val attackingMidfielderShootGoal = document.getLong("${attackingMidfielderName.text}_goal") ?: 0
                    attackingMidfielderGoalNumber.text = attackingMidfielderShootGoal.toString()
                    val attackingMidfielderShootGoalAway = document.getLong("${attackingMidfielderNameAway.text}_goal") ?: 0
                    attackingMidfielderGoalNumberAway.text = attackingMidfielderShootGoalAway.toString()

                    //handler untuk leftWinger team home
                    val leftWingerShootGoal = document.getLong("${leftWingerName.text}_goal") ?: 0
                    leftWingerGoalNumber.text = leftWingerShootGoal.toString()
                    val leftWingerShootGoalAway = document.getLong("${leftWingerNameAway.text}_goal") ?: 0
                    leftWingerGoalNumberAway.text = leftWingerShootGoalAway.toString()

                    //handler untuk rightWinger team home
                    val rightWingerShootGoal = document.getLong("${rightWingerName.text}_goal") ?: 0
                    rightWingerGoalNumber.text = rightWingerShootGoal.toString()
                    val rightWingerShootGoalAway = document.getLong("${rightWingerNameAway.text}_goal") ?: 0
                    rightWingerGoalNumberAway.text = rightWingerShootGoalAway.toString()

                    //handler untuk centreForward team home
                    val centreForwardShootGoal = document.getLong("${centreForwardName.text}_goal") ?: 0
                    centreForwardGoalNumber.text = centreForwardShootGoal.toString()
                    val centreForwardShootGoalAway = document.getLong("${centreForwardNameAway.text}_goal") ?: 0
                    centreForwardGoalNumberAway.text = centreForwardShootGoalAway.toString()

                    //handler untuk secondStriker team home
                    val secondStrikerShootGoal = document.getLong("${secondStrikerName.text}_goal") ?: 0
                    secondStrikerGoalNumber.text = secondStrikerShootGoal.toString()
                    val secondStrikerShootGoalAway = document.getLong("${secondStrikerNameAway.text}_goal") ?: 0
                    secondStrikerGoalNumberAway.text = secondStrikerShootGoalAway.toString()

                    //handler scoreHome
                    val homeScore = document.getLong("${tvTeamHome.text}_goal") ?: 0
                    val tvHomeScore = findViewById<TextView>(R.id.goal_team_home)
                    tvHomeScore.text = homeScore.toString()

                    //handler awayGoal
                    val awayScore = document.getLong("${tvTeamAway.text}_goal") ?: 0
                    val tvAwayScore = findViewById<TextView>(R.id.goal_team_away)
                    tvAwayScore.text = awayScore.toString()

                    //handler homeYellowCard
                    val homeYellowCard = document.getLong("${tvTeamHome.text}_yellow_card") ?: 0
                    val tvYellowCardHome = findViewById<TextView>(R.id.tv_yellowCard_home)
                    tvYellowCardHome.text = homeYellowCard.toString()

                    //handler homeRedCard
                    val homeRedCard = document.getLong("${tvTeamHome.text}_red_card") ?: 0
                    val tvRedCardHome = findViewById<TextView>(R.id.tv_redCard_home)
                    tvRedCardHome.text = homeRedCard.toString()

                    //handler away_yellow_card
                    val awayYellowCard = document.getLong("${tvTeamAway.text}_yellow_card") ?: 0
                    val tvYellowCardAway = findViewById<TextView>(R.id.tv_yellowCard_away)
                    tvYellowCardAway.text = awayYellowCard.toString()

                    //handler awayRedCard
                    val awayRedCard = document.getLong("${tvTeamAway.text}_red_card") ?: 0
                    val tvRedCardAway = findViewById<TextView>(R.id.tv_redCard_away)
                    tvRedCardAway.text = awayRedCard.toString()

                }
            }
        }
    }

    private fun setPlayerFoul(){

        //variabel untuk menyimpan nama pemain Away
        val goalKeeperNameAway = findViewById<TextView>(R.id.tv_goal_player1_name_away)
        val centreBackNameAway = findViewById<TextView>(R.id.tv_goal_player2_name_away)
        val leftBackNameAway = findViewById<TextView>(R.id.tv_goal_player3_name_away)
        val rightBackNameAway = findViewById<TextView>(R.id.tv_goal_player4_name_away)
        val defensiveMidfielderNameAway = findViewById<TextView>(R.id.tv_goal_player5_name_away)
        val centralMidfielderNameAway = findViewById<TextView>(R.id.tv_goal_player6_name_away)
        val attackingMidfielderNameAway = findViewById<TextView>(R.id.tv_goal_player7_name_away)
        val leftWingerNameAway = findViewById<TextView>(R.id.tv_goal_player8_name_away)
        val rightWingerNameAway = findViewById<TextView>(R.id.tv_goal_player9_name_away)
        val centreForwardNameAway = findViewById<TextView>(R.id.tv_goal_player10_name_away)
        val secondStrikerNameAway = findViewById<TextView>(R.id.tv_goal_player11_name_away)

        //variabel untuk menampilkan data jumlah foul setiap pemain away
        val goalKeeperFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player1_away)
        val centreBackFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player2_away)
        val leftBackFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player3_away)
        val rightBackFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player4_away)
        val defensiveMidfielderFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player5_away)
        val centralMidfielderFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player6_away)
        val attackingMidfielderFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player7_away)
        val leftWingerFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player8_away)
        val rightWingerFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player9_away)
        val centreForwardFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player10_away)
        val secondStrikerFoulNumberAway = findViewById<TextView>(R.id.tv_foul_player11_away)

        //variabel untuk menyimpan nama pemain home
        val goalKeeperName = findViewById<TextView>(R.id.tv_goal_player1_name_home)
        val centreBackName = findViewById<TextView>(R.id.tv_goal_player2_name_home)
        val leftBackName = findViewById<TextView>(R.id.tv_goal_player3_name_home)
        val rightBackName = findViewById<TextView>(R.id.tv_goal_player4_name_home)
        val defensiveMidfielderName = findViewById<TextView>(R.id.tv_goal_player5_name_home)
        val centralMidfielderName = findViewById<TextView>(R.id.tv_goal_player6_name_home)
        val attackingMidfielderName = findViewById<TextView>(R.id.tv_goal_player7_name_home)
        val leftWingerName = findViewById<TextView>(R.id.tv_goal_player8_name_home)
        val rightWingerName = findViewById<TextView>(R.id.tv_goal_player9_name_home)
        val centreForwardName = findViewById<TextView>(R.id.tv_goal_player10_name_home)
        val secondStrikerName = findViewById<TextView>(R.id.tv_goal_player11_name_home)

        //variabel menyimpan jumlah foul setiap pemain Home
        val goalKeeperFoulNumber = findViewById<TextView>(R.id.tv_foul_player1_home)
        val centreBackFoulNumber = findViewById<TextView>(R.id.tv_foul_player2_home)
        val leftBackFoulNumber = findViewById<TextView>(R.id.tv_foul_player3_home)
        val rightBackFoulNumber = findViewById<TextView>(R.id.tv_foul_player4_home)
        val defensiveMidfielderFoulNumber = findViewById<TextView>(R.id.tv_foul_player5_home)
        val centralMidfielderFoulNumber = findViewById<TextView>(R.id.tv_foul_player6_home_match)
        val attackingMidfielderFoulNumber = findViewById<TextView>(R.id.tv_foul_player7_home)
        val leftWingerFoulNumber = findViewById<TextView>(R.id.tv_foul_player8_home)
        val rightWingerFoulNumber = findViewById<TextView>(R.id.tv_foul_player9_home)
        val centreForwardFoulNumber = findViewById<TextView>(R.id.tv_foul_player10_home)
        val secondStrikerFoulNumber = findViewById<TextView>(R.id.tv_foul_player11_home)

        val matchDocumentId = intent.getStringExtra("matchId")
        val docRef = db.collection("matchStats").whereEqualTo("match_id", matchDocumentId)

        docRef.addSnapshotListener { snapshot, e ->
            if (e != null) {
                Log.w("Error", "Listen failed.", e)
                return@addSnapshotListener
            }
            if (snapshot != null) {
                for (document in snapshot){

                    //handler homeGoalKeeperFoul
                    val homeGoalKeeper = goalKeeperName.text
                    val gk_shootFail = document.getLong("${homeGoalKeeper}_shoot_fail") ?: 0
                    val gk_assist = document.getLong("${homeGoalKeeper}_assist") ?: 0
                    val gk_10mGoal = document.getLong("${homeGoalKeeper}_10m_goal") ?: 0
                    val gk_yellowCard = document.getLong("${homeGoalKeeper}_yellow_card") ?: 0
                    val gk_penalty = document.getLong("${homeGoalKeeper}_penalty") ?: 0
                    val gk_10mFail = document.getLong("${homeGoalKeeper}_10m_fail") ?: 0
                    val gk_redCard = document.getLong("${homeGoalKeeper}_red_card") ?: 0
                    val gk_steal = document.getLong("${homeGoalKeeper}_steal") ?: 0
                    val gk_offside = document.getLong("${homeGoalKeeper}_offside") ?: 0
                    val gk_foul = gk_shootFail + gk_assist +gk_10mGoal + gk_yellowCard + gk_penalty + gk_10mFail + gk_redCard +gk_steal + gk_offside
                    goalKeeperFoulNumber.text = gk_foul.toString()

                    //handler homeCentreBack
                    val homeCentreBack = centreBackName.text
                    val cb_shootFail = document.getLong("${homeCentreBack}_shoot_fail") ?: 0
                    val cb_assist = document.getLong("${homeCentreBack}_assist") ?: 0
                    val cb_10mGoal = document.getLong("${homeCentreBack}_10m_goal") ?: 0
                    val cb_yellowCard = document.getLong("${homeCentreBack}_yellow_card") ?: 0
                    val cb_penalty = document.getLong("${homeCentreBack}_penalty") ?: 0
                    val cb_10mFail = document.getLong("${homeCentreBack}_10m_fail") ?: 0
                    val cb_redCard = document.getLong("${homeCentreBack}_red_card") ?: 0
                    val cb_steal = document.getLong("${homeCentreBack}_steal") ?: 0
                    val cb_offside = document.getLong("${homeCentreBack}_offside") ?: 0
                    val cb_foul = cb_shootFail + cb_assist +cb_10mGoal + cb_yellowCard + cb_penalty + cb_10mFail + cb_redCard +cb_steal + cb_offside
                    centreBackFoulNumber.text = cb_foul.toString()

                    //handler homeLeftBack
                    val homeLeftBack = leftBackName.text
                    val lb_shootFail = document.getLong("${homeLeftBack}_shoot_fail") ?: 0
                    val lb_assist = document.getLong("${homeLeftBack}_assist") ?: 0
                    val lb_10mGoal = document.getLong("${homeLeftBack}_10m_goal") ?: 0
                    val lb_yellowCard = document.getLong("${homeLeftBack}_yellow_card") ?: 0
                    val lb_penalty = document.getLong("${homeLeftBack}_penalty") ?: 0
                    val lb_10mFail = document.getLong("${homeLeftBack}_10m_fail") ?: 0
                    val lb_redCard = document.getLong("${homeLeftBack}_red_card") ?: 0
                    val lb_steal = document.getLong("${homeLeftBack}_steal") ?: 0
                    val lb_offside = document.getLong("${homeLeftBack}_offside") ?: 0
                    val lb_foul = lb_shootFail + lb_assist +lb_10mGoal + lb_yellowCard + lb_penalty + lb_10mFail + lb_redCard +lb_steal + lb_offside
                    leftBackFoulNumber.text = lb_foul.toString()

                    //handler homeRightBack
                    val homeRightBack = rightBackName.text
                    val rb_shootFail = document.getLong("${homeRightBack}_shoot_fail") ?: 0
                    val rb_assist = document.getLong("${homeRightBack}_assist") ?: 0
                    val rb_10mGoal = document.getLong("${homeRightBack}_10m_goal") ?: 0
                    val rb_yellowCard = document.getLong("${homeRightBack}_yellow_card") ?: 0
                    val rb_penalty = document.getLong("${homeRightBack}_penalty") ?: 0
                    val rb_10mFail = document.getLong("${homeRightBack}_10m_fail") ?: 0
                    val rb_redCard = document.getLong("${homeRightBack}_red_card") ?: 0
                    val rb_steal = document.getLong("${homeRightBack}_steal") ?: 0
                    val rb_offside = document.getLong("${homeRightBack}_offside") ?: 0
                    val rb_foul = rb_shootFail + rb_assist +rb_10mGoal + rb_yellowCard + rb_penalty + rb_10mFail + rb_redCard +rb_steal + rb_offside
                    rightBackFoulNumber.text = rb_foul.toString()

                    //handler defensiveMidfielder
                    val homeDefensiveMidfielder = defensiveMidfielderName.text
                    val dm_shootFail = document.getLong("${homeDefensiveMidfielder}_shoot_fail") ?: 0
                    val dm_assist = document.getLong("${homeDefensiveMidfielder}_assist") ?: 0
                    val dm_10mGoal = document.getLong("${homeDefensiveMidfielder}_10m_goal") ?: 0
                    val dm_yellowCard = document.getLong("${homeDefensiveMidfielder}_yellow_card") ?: 0
                    val dm_penalty = document.getLong("${homeDefensiveMidfielder}_penalty") ?: 0
                    val dm_10mFail = document.getLong("${homeDefensiveMidfielder}_10m_fail") ?: 0
                    val dm_redCard = document.getLong("${homeDefensiveMidfielder}_red_card") ?: 0
                    val dm_steal = document.getLong("${homeDefensiveMidfielder}_steal") ?: 0
                    val dm_offside = document.getLong("${homeDefensiveMidfielder}_offside") ?: 0
                    val dm_foul = dm_shootFail + dm_assist +dm_10mGoal + dm_yellowCard + dm_penalty + dm_10mFail + dm_redCard +dm_steal + dm_offside
                    defensiveMidfielderFoulNumber.text = dm_foul.toString()

                    //handler centralMidfielder
                    val homeCentralMidfielder = centralMidfielderName.text
                    val cm_shootFail = document.getLong("${homeCentralMidfielder}_shoot_fail") ?: 0
                    val cm_assist = document.getLong("${homeCentralMidfielder}_assist") ?: 0
                    val cm_10mGoal = document.getLong("${homeCentralMidfielder}_10m_goal") ?: 0
                    val cm_yellowCard = document.getLong("${homeCentralMidfielder}_yellow_card") ?: 0
                    val cm_penalty = document.getLong("${homeCentralMidfielder}_penalty") ?: 0
                    val cm_10mFail = document.getLong("${homeCentralMidfielder}_10m_fail") ?: 0
                    val cm_redCard = document.getLong("${homeCentralMidfielder}_red_card") ?: 0
                    val cm_steal = document.getLong("${homeCentralMidfielder}_steal") ?: 0
                    val cm_offside = document.getLong("${homeCentralMidfielder}_offside") ?: 0
                    val cm_foul = cm_shootFail + cm_assist +cm_10mGoal + cm_yellowCard + cm_penalty + cm_10mFail + cm_redCard +cm_steal + cm_offside
                    centralMidfielderFoulNumber.text = cm_foul.toString()

                    //handler attackingMidfielder
                    val homeAttackingMidfielder = attackingMidfielderName.text
                    val am_shootFail = document.getLong("${homeAttackingMidfielder}_shoot_fail") ?: 0
                    val am_assist = document.getLong("${homeAttackingMidfielder}_assist") ?: 0
                    val am_10mGoal = document.getLong("${homeAttackingMidfielder}_10m_goal") ?: 0
                    val am_yellowCard = document.getLong("${homeAttackingMidfielder}_yellow_card") ?: 0
                    val am_penalty = document.getLong("${homeAttackingMidfielder}_penalty") ?: 0
                    val am_10mFail = document.getLong("${homeAttackingMidfielder}_10m_fail") ?: 0
                    val am_redCard = document.getLong("${homeAttackingMidfielder}_red_card") ?: 0
                    val am_steal = document.getLong("${homeAttackingMidfielder}_steal") ?: 0
                    val am_offside = document.getLong("${homeAttackingMidfielder}_offside") ?: 0
                    val am_foul = am_shootFail + am_assist +am_10mGoal + am_yellowCard + am_penalty + am_10mFail + am_redCard +am_steal + am_offside
                    attackingMidfielderFoulNumber.text = am_foul.toString()

                    //handler leftWinger
                    val homeLeftWinger = leftWingerName.text
                    val lw_shootFail = document.getLong("${homeLeftWinger}_shoot_fail") ?: 0
                    val lw_assist = document.getLong("${homeLeftWinger}_assist") ?: 0
                    val lw_10mGoal = document.getLong("${homeLeftWinger}_10m_goal") ?: 0
                    val lw_yellowCard = document.getLong("${homeLeftWinger}_yellow_card") ?: 0
                    val lw_penalty = document.getLong("${homeLeftWinger}_penalty") ?: 0
                    val lw_10mFail = document.getLong("${homeLeftWinger}_10m_fail") ?: 0
                    val lw_redCard = document.getLong("${homeLeftWinger}_red_card") ?: 0
                    val lw_steal = document.getLong("${homeLeftWinger}_steal") ?: 0
                    val lw_offside = document.getLong("${homeLeftWinger}_offside") ?: 0
                    val lw_foul = lw_shootFail + lw_assist +lw_10mGoal + lw_yellowCard + lw_penalty + lw_10mFail + lw_redCard +lw_steal + lw_offside
                    leftWingerFoulNumber.text = lw_foul.toString()

                    //handler rigthWinger
                    val homeRigthWinger = rightWingerName.text
                    val rw_shootFail = document.getLong("${homeRigthWinger}_shoot_fail") ?: 0
                    val rw_assist = document.getLong("${homeRigthWinger}_assist") ?: 0
                    val rw_10mGoal = document.getLong("${homeRigthWinger}_10m_goal") ?: 0
                    val rw_yellowCard = document.getLong("${homeRigthWinger}_yellow_card") ?: 0
                    val rw_penalty = document.getLong("${homeRigthWinger}_penalty") ?: 0
                    val rw_10mFail = document.getLong("${homeRigthWinger}_10m_fail") ?: 0
                    val rw_redCard = document.getLong("${homeRigthWinger}_red_card") ?: 0
                    val rw_steal = document.getLong("${homeRigthWinger}_steal") ?: 0
                    val rw_offside = document.getLong("${homeRigthWinger}_offside") ?: 0
                    val rw_foul = rw_shootFail + rw_assist +rw_10mGoal + rw_yellowCard + rw_penalty + rw_10mFail + rw_redCard +rw_steal + rw_offside
                    rightWingerFoulNumber.text = rw_foul.toString()

                    //handler centreForward
                    val homeCentreForward = centreForwardName.text
                    val cf_shootFail = document.getLong("${homeCentreForward}_shoot_fail") ?: 0
                    val cf_assist = document.getLong("${homeCentreForward}_assist") ?: 0
                    val cf_10mGoal = document.getLong("${homeCentreForward}_10m_goal") ?: 0
                    val cf_yellowCard = document.getLong("${homeCentreForward}_yellow_card") ?: 0
                    val cf_penalty = document.getLong("${homeCentreForward}_penalty") ?: 0
                    val cf_10mFail = document.getLong("${homeCentreForward}_10m_fail") ?: 0
                    val cf_redCard = document.getLong("${homeCentreForward}_red_card") ?: 0
                    val cf_steal = document.getLong("${homeCentreForward}_steal") ?: 0
                    val cf_offside = document.getLong("${homeCentreForward}_offside") ?: 0
                    val cf_foul = cf_shootFail + cf_assist +cf_10mGoal + cf_yellowCard + cf_penalty + cf_10mFail + cf_redCard +cf_steal + cf_offside
                    centreForwardFoulNumber.text = cf_foul.toString()

                    //handler secondStriker
                    val homeSecondStriker = secondStrikerName.text
                    val sc_shootFail = document.getLong("${homeSecondStriker}_shoot_fail") ?: 0
                    val sc_assist = document.getLong("${homeSecondStriker}_assist") ?: 0
                    val sc_10mGoal = document.getLong("${homeSecondStriker}_10m_goal") ?: 0
                    val sc_yellowCard = document.getLong("${homeSecondStriker}_yellow_card") ?: 0
                    val sc_penalty = document.getLong("${homeSecondStriker}_penalty") ?: 0
                    val sc_10mFail = document.getLong("${homeSecondStriker}_10m_fail") ?: 0
                    val sc_redCard = document.getLong("${homeSecondStriker}_red_card") ?: 0
                    val sc_steal = document.getLong("${homeSecondStriker}_steal") ?: 0
                    val sc_offside = document.getLong("${homeSecondStriker}_offside") ?: 0
                    val sc_foul = sc_shootFail + sc_assist +sc_10mGoal + sc_yellowCard + sc_penalty + sc_10mFail + sc_redCard +sc_steal + sc_offside
                    secondStrikerFoulNumber.text = sc_foul.toString()

                    //handler awayGoalKeeperFoul
                    val homeGoalKeeperNameAway = goalKeeperNameAway.text
                    val gk_away_shootFail = document.getLong("${homeGoalKeeperNameAway}_shoot_fail") ?: 0
                    val gk_away_assist = document.getLong("${homeGoalKeeperNameAway}_assist") ?: 0
                    val gk_away_10mGoal = document.getLong("${homeGoalKeeperNameAway}_10m_goal") ?: 0
                    val gk_away_yellowCard = document.getLong("${homeGoalKeeperNameAway}_yellow_card") ?: 0
                    val gk_away_penalty = document.getLong("${homeGoalKeeperNameAway}_penalty") ?: 0
                    val gk_away_10mFail = document.getLong("${homeGoalKeeperNameAway}_10m_fail") ?: 0
                    val gk_away_redCard = document.getLong("${homeGoalKeeperNameAway}_red_card") ?: 0
                    val gk_away_steal = document.getLong("${homeGoalKeeperNameAway}_steal") ?: 0
                    val gk_away_offside = document.getLong("${homeGoalKeeperNameAway}_offside") ?: 0
                    val gk_away_foul = gk_away_shootFail + gk_away_assist +gk_away_10mGoal + gk_away_yellowCard + gk_away_penalty + gk_away_10mFail + gk_away_redCard +gk_away_steal + gk_away_offside
                    goalKeeperFoulNumberAway.text = gk_away_foul.toString()

                    //handler awayCentreBack
                    val homeCentreBackNameAway = centreBackNameAway.text
                    val cb_away_shootFail = document.getLong("${homeCentreBackNameAway}_shoot_fail") ?: 0
                    val cb_away_assist = document.getLong("${homeCentreBackNameAway}_assist") ?: 0
                    val cb_away_10mGoal = document.getLong("${homeCentreBackNameAway}_10m_goal") ?: 0
                    val cb_away_yellowCard = document.getLong("${homeCentreBackNameAway}_yellow_card") ?: 0
                    val cb_away_penalty = document.getLong("${homeCentreBackNameAway}_penalty") ?: 0
                    val cb_away_10mFail = document.getLong("${homeCentreBackNameAway}_10m_fail") ?: 0
                    val cb_away_redCard = document.getLong("${homeCentreBackNameAway}_red_card") ?: 0
                    val cb_away_steal = document.getLong("${homeCentreBackNameAway}_steal") ?: 0
                    val cb_away_offside = document.getLong("${homeCentreBackNameAway}_offside") ?: 0
                    val cb_away_foul = cb_away_shootFail + cb_away_assist +cb_away_10mGoal + cb_away_yellowCard + cb_away_penalty + cb_away_10mFail + cb_away_redCard +cb_away_steal + cb_away_offside
                    centreBackFoulNumberAway.text = cb_away_foul.toString()

                    //handler homeLeftBackAway
                    val homeLeftBackAwayName = leftBackNameAway.text
                    val lb_away_shootFail = document.getLong("${homeLeftBackAwayName}_shoot_fail") ?: 0
                    val lb_away_assist = document.getLong("${homeLeftBackAwayName}_assist") ?: 0
                    val lb_away_10mGoal = document.getLong("${homeLeftBackAwayName}_10m_goal") ?: 0
                    val lb_away_yellowCard = document.getLong("${homeLeftBackAwayName}_yellow_card") ?: 0
                    val lb_away_penalty = document.getLong("${homeLeftBackAwayName}_penalty") ?: 0
                    val lb_away_10mFail = document.getLong("${homeLeftBackAwayName}_10m_fail") ?: 0
                    val lb_away_redCard = document.getLong("${homeLeftBackAwayName}_red_card") ?: 0
                    val lb_away_steal = document.getLong("${homeLeftBackAwayName}_steal") ?: 0
                    val lb_away_offside = document.getLong("${homeLeftBackAwayName}_offside") ?: 0
                    val lb_away_foul = lb_away_shootFail + lb_away_assist +lb_away_10mGoal + lb_away_yellowCard + lb_away_penalty + lb_away_10mFail + lb_away_redCard +lb_away_steal + lb_away_offside
                    leftBackFoulNumberAway.text = lb_away_foul.toString()

                    //handler homeRightBackAway
                    val homeRightBackAwayName = rightBackNameAway.text
                    val rb_away_shootFail = document.getLong("${homeRightBackAwayName}_shoot_fail") ?: 0
                    val rb_away_assist = document.getLong("${homeRightBackAwayName}_assist") ?: 0
                    val rb_away_10mGoal = document.getLong("${homeRightBackAwayName}_10m_goal") ?: 0
                    val rb_away_yellowCard = document.getLong("${homeRightBackAwayName}_yellow_card") ?: 0
                    val rb_away_penalty = document.getLong("${homeRightBackAwayName}_penalty") ?: 0
                    val rb_away_10mFail = document.getLong("${homeRightBackAwayName}_10m_fail") ?: 0
                    val rb_away_redCard = document.getLong("${homeRightBackAwayName}_red_card") ?: 0
                    val rb_away_steal = document.getLong("${homeRightBackAwayName}_steal") ?: 0
                    val rb_away_offside = document.getLong("${homeRightBackAwayName}_offside") ?: 0
                    val rb_away_foul = rb_away_shootFail + rb_away_assist +rb_away_10mGoal + rb_away_yellowCard + rb_away_penalty + rb_away_10mFail + rb_away_redCard +rb_away_steal + rb_away_offside
                    rightBackFoulNumberAway.text = rb_away_foul.toString()

                    //handler defensiveMidfielderAway
                    val awayDefensiveMidfielder = defensiveMidfielderNameAway.text
                    val dm_away_shootFail = document.getLong("${awayDefensiveMidfielder}_shoot_fail") ?: 0
                    val dm_away_assist = document.getLong("${awayDefensiveMidfielder}_assist") ?: 0
                    val dm_away_10mGoal = document.getLong("${awayDefensiveMidfielder}_10m_goal") ?: 0
                    val dm_away_yellowCard = document.getLong("${awayDefensiveMidfielder}_yellow_card") ?: 0
                    val dm_away_penalty = document.getLong("${awayDefensiveMidfielder}_penalty") ?: 0
                    val dm_away_10mFail = document.getLong("${awayDefensiveMidfielder}_10m_fail") ?: 0
                    val dm_away_redCard = document.getLong("${awayDefensiveMidfielder}_red_card") ?: 0
                    val dm_away_steal = document.getLong("${awayDefensiveMidfielder}_steal") ?: 0
                    val dm_away_offside = document.getLong("${awayDefensiveMidfielder}_offside") ?: 0
                    val dm_away_foul = dm_away_shootFail + dm_away_assist +dm_away_10mGoal + dm_away_yellowCard + dm_away_penalty + dm_away_10mFail + dm_away_redCard +dm_away_steal + dm_away_offside
                    defensiveMidfielderFoulNumberAway.text = dm_away_foul.toString()

                    //handler centralMidfielderAway
                    val homeCentralMidfielderAway = centralMidfielderNameAway.text
                    val cm_away_shootFail = document.getLong("${homeCentralMidfielderAway}_shoot_fail") ?: 0
                    val cm_away_assist = document.getLong("${homeCentralMidfielderAway}_assist") ?: 0
                    val cm_away_10mGoal = document.getLong("${homeCentralMidfielderAway}_10m_goal") ?: 0
                    val cm_away_yellowCard = document.getLong("${homeCentralMidfielderAway}_yellow_card") ?: 0
                    val cm_away_penalty = document.getLong("${homeCentralMidfielderAway}_penalty") ?: 0
                    val cm_away_10mFail = document.getLong("${homeCentralMidfielderAway}_10m_fail") ?: 0
                    val cm_away_redCard = document.getLong("${homeCentralMidfielderAway}_red_card") ?: 0
                    val cm_away_steal = document.getLong("${homeCentralMidfielderAway}_steal") ?: 0
                    val cm_away_offside = document.getLong("${homeCentralMidfielderAway}_offside") ?: 0
                    val cm_away_foul = cm_away_shootFail + cm_away_assist +cm_away_10mGoal + cm_away_yellowCard + cm_away_penalty + cm_away_10mFail + cm_away_redCard +cm_away_steal + cm_away_offside
                    centralMidfielderFoulNumberAway.text = cm_away_foul.toString()

                    //handler attackingMidfielder
                    val homeAttackingMidfielderAway = attackingMidfielderNameAway.text
                    val am_away_shootFail = document.getLong("${homeAttackingMidfielderAway}_shoot_fail") ?: 0
                    val am_away_assist = document.getLong("${homeAttackingMidfielderAway}_assist") ?: 0
                    val am_away_10mGoal = document.getLong("${homeAttackingMidfielderAway}_10m_goal") ?: 0
                    val am_away_yellowCard = document.getLong("${homeAttackingMidfielderAway}_yellow_card") ?: 0
                    val am_away_penalty = document.getLong("${homeAttackingMidfielderAway}_penalty") ?: 0
                    val am_away_10mFail = document.getLong("${homeAttackingMidfielderAway}_10m_fail") ?: 0
                    val am_away_redCard = document.getLong("${homeAttackingMidfielderAway}_red_card") ?: 0
                    val am_away_steal = document.getLong("${homeAttackingMidfielderAway}_steal") ?: 0
                    val am_away_offside = document.getLong("${homeAttackingMidfielderAway}_offside") ?: 0
                    val am_away_foul = am_away_shootFail + am_away_assist +am_away_10mGoal + am_away_yellowCard + am_away_penalty + am_away_10mFail + am_away_redCard +am_away_steal + am_away_offside
                    attackingMidfielderFoulNumberAway.text = am_away_foul.toString()

                    //handler leftWingerAway
                    val awayLeftWinger = leftWingerNameAway.text
                    val lw_away_shootFail = document.getLong("${awayLeftWinger}_shoot_fail") ?: 0
                    val lw_away_assist = document.getLong("${awayLeftWinger}_assist") ?: 0
                    val lw_away_10mGoal = document.getLong("${awayLeftWinger}_10m_goal") ?: 0
                    val lw_away_yellowCard = document.getLong("${awayLeftWinger}_yellow_card") ?: 0
                    val lw_away_penalty = document.getLong("${awayLeftWinger}_penalty") ?: 0
                    val lw_away_10mFail = document.getLong("${awayLeftWinger}_10m_fail") ?: 0
                    val lw_away_redCard = document.getLong("${awayLeftWinger}_red_card") ?: 0
                    val lw_away_steal = document.getLong("${awayLeftWinger}_steal") ?: 0
                    val lw_away_offside = document.getLong("${awayLeftWinger}_offside") ?: 0
                    val lw_away_foul = lw_away_shootFail + lw_away_assist +lw_away_10mGoal + lw_away_yellowCard + lw_away_penalty + lw_away_10mFail + lw_away_redCard +lw_away_steal + lw_away_offside
                    leftWingerFoulNumberAway.text = lw_away_foul.toString()

                    //handler rigthWinger
                    val awayRigthWinger = rightWingerNameAway.text
                    val rw_away_shootFail = document.getLong("${awayRigthWinger}_shoot_fail") ?: 0
                    val rw_away_assist = document.getLong("${awayRigthWinger}_assist") ?: 0
                    val rw_away_10mGoal = document.getLong("${awayRigthWinger}_10m_goal") ?: 0
                    val rw_away_yellowCard = document.getLong("${awayRigthWinger}_yellow_card") ?: 0
                    val rw_away_penalty = document.getLong("${awayRigthWinger}_penalty") ?: 0
                    val rw_away_10mFail = document.getLong("${awayRigthWinger}_10m_fail") ?: 0
                    val rw_away_redCard = document.getLong("${awayRigthWinger}_red_card") ?: 0
                    val rw_away_steal = document.getLong("${awayRigthWinger}_steal") ?: 0
                    val rw_away_offside = document.getLong("${awayRigthWinger}_offside") ?: 0
                    val rw_away_foul = rw_away_shootFail + rw_away_assist +rw_away_10mGoal + rw_away_yellowCard + rw_away_penalty + rw_away_10mFail + rw_away_redCard +rw_away_steal + rw_away_offside
                    rightWingerFoulNumberAway.text = rw_away_foul.toString()

                    //handler centreForward
                    val awayCentreForward = centreForwardNameAway.text
                    val cf_away_shootFail = document.getLong("${awayCentreForward}_shoot_fail") ?: 0
                    val cf_away_assist = document.getLong("${awayCentreForward}_assist") ?: 0
                    val cf_away_10mGoal = document.getLong("${awayCentreForward}_10m_goal") ?: 0
                    val cf_away_yellowCard = document.getLong("${awayCentreForward}_yellow_card") ?: 0
                    val cf_away_penalty = document.getLong("${awayCentreForward}_penalty") ?: 0
                    val cf_away_10mFail = document.getLong("${awayCentreForward}_10m_fail") ?: 0
                    val cf_away_redCard = document.getLong("${awayCentreForward}_red_card") ?: 0
                    val cf_away_steal = document.getLong("${awayCentreForward}_steal") ?: 0
                    val cf_away_offside = document.getLong("${awayCentreForward}_offside") ?: 0
                    val cf_away_foul = cf_away_shootFail + cf_away_assist +cf_away_10mGoal + cf_away_yellowCard + cf_away_penalty + cf_away_10mFail + cf_away_redCard +cf_away_steal + cf_away_offside
                    centreForwardFoulNumberAway.text = cf_away_foul.toString()

                    //handler secondStriker
                    val awaySecondStriker = secondStrikerNameAway.text
                    val sc_away_shootFail = document.getLong("${awaySecondStriker}_shoot_fail") ?: 0
                    val sc_away_assist = document.getLong("${awaySecondStriker}_assist") ?: 0
                    val sc_away_10mGoal = document.getLong("${awaySecondStriker}_10m_goal") ?: 0
                    val sc_away_yellowCard = document.getLong("${awaySecondStriker}_yellow_card") ?: 0
                    val sc_away_penalty = document.getLong("${awaySecondStriker}_penalty") ?: 0
                    val sc_away_10mFail = document.getLong("${awaySecondStriker}_10m_fail") ?: 0
                    val sc_away_redCard = document.getLong("${awaySecondStriker}_red_card") ?: 0
                    val sc_away_steal = document.getLong("${awaySecondStriker}_steal") ?: 0
                    val sc_away_offside = document.getLong("${awaySecondStriker}_offside") ?: 0
                    val sc_away_foul = sc_away_shootFail + sc_away_assist +sc_away_10mGoal + sc_away_yellowCard + sc_away_penalty + sc_away_10mFail + sc_away_redCard +sc_away_steal + sc_away_offside
                    secondStrikerFoulNumberAway.text = sc_away_foul.toString()
                }
            }
        }
    }

    private fun changePlayer(){
        
    }
}